<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yanbin&#39;s blog</title>
  
  <subtitle>Discovering, Learning, Sharing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.luoyanbin.cn/"/>
  <updated>2018-11-22T12:16:56.438Z</updated>
  <id>https://blog.luoyanbin.cn/</id>
  
  <author>
    <name>Yanbin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu16.04在apt-get时遇到initramfs-tools错误</title>
    <link href="https://blog.luoyanbin.cn/2018/11/22/Ubuntu16-04%E5%9C%A8apt-get%E6%97%B6%E9%81%87%E5%88%B0initramfs-tools%E9%94%99%E8%AF%AF/"/>
    <id>https://blog.luoyanbin.cn/2018/11/22/Ubuntu16-04在apt-get时遇到initramfs-tools错误/</id>
    <published>2018-11-22T12:09:03.000Z</published>
    <updated>2018-11-22T12:16:56.438Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu16.04在apt-get时遇到initramfs-tools错误，错误描述如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">yanbin@laptop:~$ sudo apt-get install -f</span><br><span class="line">[sudo] password for yanbin: </span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 1 not upgraded.</span><br><span class="line">1 not fully installed or removed.</span><br><span class="line">After this operation, 0 B of additional disk space will be used.</span><br><span class="line">Setting up initramfs-tools (0.122ubuntu8.13) ...</span><br><span class="line">update-initramfs: deferring update (trigger activated)</span><br><span class="line">Processing triggers for initramfs-tools (0.122ubuntu8.13) ...</span><br><span class="line">update-initramfs: Generating /boot/initrd.img-4.15.0-39-generic</span><br><span class="line">W: Possible missing firmware /lib/firmware/i915/kbl_guc_ver9_14.bin for module i915</span><br><span class="line">W: Possible missing firmware /lib/firmware/i915/bxt_guc_ver8_7.bin for module i915</span><br><span class="line"></span><br><span class="line">gzip: stdout: No space left on device</span><br><span class="line">E: mkinitramfs failure cpio 141 gzip 1</span><br><span class="line">update-initramfs: failed for /boot/initrd.img-4.15.0-39-generic with 1.</span><br><span class="line">dpkg: error processing package initramfs-tools (--configure):</span><br><span class="line"> subprocess installed post-installation script returned error exit status 1</span><br><span class="line">Errors were encountered while processing:</span><br><span class="line"> initramfs-tools</span><br><span class="line">E: Sub-process /usr/bin/dpkg returned an error code (1)</span><br></pre></td></tr></table></figure><p>解决步骤：</p><ol><li>uname -r 查询当前的内核版本号</li></ol><p>我的内核版本号为4.15.0-39-generic</p><ol start="2"><li>cd进入/boot目录下，输入命令dpkg  –get-selections | grep linux</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">yanbin@laptop:/boot$ dpkg  --get-selections | grep linux</span><br><span class="line">console-setup-linuxinstall</span><br><span class="line">libselinux1:amd64install</span><br><span class="line">linux-baseinstall</span><br><span class="line">linux-firmwareinstall</span><br><span class="line">linux-generic-hwe-16.04install</span><br><span class="line">linux-headers-4.15.0-29install</span><br><span class="line">linux-headers-4.15.0-29-genericinstall</span><br><span class="line">linux-headers-4.15.0-39install</span><br><span class="line">linux-headers-4.15.0-39-genericinstall</span><br><span class="line">linux-headers-generic-hwe-16.04install</span><br><span class="line">linux-image-4.15.0-29-genericinstall</span><br><span class="line">linux-image-4.15.0-39-genericinstall</span><br><span class="line">linux-image-generic-hwe-16.04install</span><br><span class="line">linux-libc-dev:amd64install</span><br><span class="line">linux-modules-4.15.0-29-genericinstall</span><br><span class="line">linux-modules-4.15.0-39-genericinstall</span><br><span class="line">linux-modules-extra-4.15.0-29-genericinstall</span><br><span class="line">linux-modules-extra-4.15.0-39-genericinstall</span><br><span class="line">linux-sound-baseinstall</span><br><span class="line">pptp-linuxinstall</span><br><span class="line">syslinuxinstall</span><br><span class="line">syslinux-commoninstall</span><br><span class="line">syslinux-legacyinstall</span><br><span class="line">util-linuxinstall</span><br></pre></td></tr></table></figure><ol start="3"><li>删除所有旧版本, sudo apt-get purge linux-modules-4.15.0-29-generic，比如我删除所有的29版本</li><li>删除之后，输入命令ls -l，结果如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yanbin@laptop:/boot$ ls -l</span><br><span class="line">total 67380</span><br><span class="line">-rw-r--r-- 1 root root  1537997 10月 25 04:07 abi-4.15.0-39-generic</span><br><span class="line">-rw-r--r-- 1 root root   217026 10月 25 04:07 config-4.15.0-39-generic</span><br><span class="line">drwxr-xr-x 5 root root     1024 11月 21 20:52 grub</span><br><span class="line">-rw-r--r-- 1 root root 54504002 11月 21 20:52 initrd.img-4.15.0-39-generic</span><br><span class="line">drwx------ 2 root root    12288 11月 21  2018 lost+found</span><br><span class="line">-rw-r--r-- 1 root root   182704 1月  28  2016 memtest86+.bin</span><br><span class="line">-rw-r--r-- 1 root root   184380 1月  28  2016 memtest86+.elf</span><br><span class="line">-rw-r--r-- 1 root root   184840 1月  28  2016 memtest86+_multiboot.bin</span><br><span class="line">-rw-r--r-- 1 root root        0 10月 25 04:07 retpoline-4.15.0-39-generic</span><br><span class="line">-rw------- 1 root root  4046310 10月 25 04:07 System.map-4.15.0-39-generic</span><br><span class="line">-rw------- 1 root root  8121560 10月 25 18:43 vmlinuz-4.15.0-39-generic</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ubuntu16.04在apt-get时遇到initramfs-tools错误，错误描述如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="Ubuntu基础" scheme="https://blog.luoyanbin.cn/categories/Ubuntu%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Ubuntu" scheme="https://blog.luoyanbin.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04搭建python3环境</title>
    <link href="https://blog.luoyanbin.cn/2018/09/23/Ubuntu%E6%90%AD%E5%BB%BApython3%E7%8E%AF%E5%A2%83/"/>
    <id>https://blog.luoyanbin.cn/2018/09/23/Ubuntu搭建python3环境/</id>
    <published>2018-09-23T04:50:36.000Z</published>
    <updated>2018-11-22T12:00:11.593Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu16.04系统内置了Python2和Python3，默认情况下是Python2。</p><p>我个人常用Python3，所以首先将Python3设置为默认。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150</span><br></pre></td></tr></table></figure><p>测试一下是否设置成功，如果显示python 3.5.2表示设置成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -V</span><br></pre></td></tr></table></figure><p>系统自带的python是没有内置pip工具的，想要安装其他库，首先安装一下python的pip工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure><p>安装后就可以使用 pip3 install package 安装库了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ubuntu16.04系统内置了Python2和Python3，默认情况下是Python2。&lt;/p&gt;
&lt;p&gt;我个人常用Python3，所以首先将Python3设置为默认。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
      <category term="Ubuntu基础" scheme="https://blog.luoyanbin.cn/categories/Ubuntu%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python" scheme="https://blog.luoyanbin.cn/tags/Python/"/>
    
      <category term="Ubuntu" scheme="https://blog.luoyanbin.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>GBDT和XGBoost整理</title>
    <link href="https://blog.luoyanbin.cn/2018/09/18/GBDT%E5%92%8CXGBoost%E6%95%B4%E7%90%86/"/>
    <id>https://blog.luoyanbin.cn/2018/09/18/GBDT和XGBoost整理/</id>
    <published>2018-09-18T07:32:47.000Z</published>
    <updated>2018-11-22T12:00:11.589Z</updated>
    
    <content type="html"><![CDATA[<p>百度“一面之缘”，还是非常感谢百度机器学习的面试官，给了很多中肯的建议，谢谢！</p><p>本篇文章主要梳理一下GBDT和XGBoost之间的关系以及各自的知识点。</p><h1 id="DT"><a href="#DT" class="headerlink" title="DT"></a>DT</h1><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><h3 id="Q1：决策树可以做什么？"><a href="#Q1：决策树可以做什么？" class="headerlink" title="Q1：决策树可以做什么？"></a>Q1：决策树可以做什么？</h3><p>决策树分为分类树和回归树。</p><ul><li><p>分类树</p><p>  分类决策树是一种有监督学习，即给定数据集中的每个样本都含有一组属性（即特征）和一个标签（即类别）。</p><p>  分类树通常采用信息增益或信息增益比来划分节点，每个节点样本的类别情况投票决定测试样本的类别。</p><p>  决策树可以表示给定特征条件下的条件概率分布。决策树对特征空间进行划分，得到互不相交的区域，并在每个区域上定义一个类的概率分布，构成了一个条件概率分布。</p><p>  假设X表示特定划分后特征空间中的区域集合，Y表示类的集合。</p><p>  二分类中，当$P(Y=+1|X=r_i)\geq0.5$，即将该叶子节点归为正类；否则归为负类。</p></li><li><p>回归树</p><p>  常见的回归决策树有CART。CART既可以做分类，也可以做回归。</p><p>  回归树使用最小化均方误差划分节点，每个节点的样本均值作为预测样本的回归预测值。</p><p>  回归树采用启发式方法，首先遍历特征空间中的所有特征，找到最优的切分特征和该特征的最优分割点，即$x_j$和$s$，将特征空间划分为两部分，并重复这个操作。</p><p>  与分类决策树不同的是，分类决策树的是通过信息增益来划分特征空间，而回归决策树是通过划分后两部分分别的误差平方和的和最小来划分的，即$\sum_{x_i \in R_m} (y_i - f(x_i))$，其中$f(x_i)$是该划分区域的预测值，即每个区域样本标签的平均值，$f(x_i) = c_m = ave(y_i|x_i\in R_m)$</p></li></ul><h1 id="GBDT"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h1><p>Boosting的优秀代表，对函数残差近似值进行梯度下降。</p><p>GBDT的核心在于，每一棵树学的是之前所有树结论和的残差，这个残差就是一个加预测值后得到真实值的累加量。</p><p><strong>GBDT的损失函数</strong>这里我常常和CART的损失函数搞混。CART节点分裂时的损失函数是根据分裂前后的信息增益，通常采用信息熵或者Gini系数。而GBDT模型可以分为分类模型和回归模型，两者的损失函数是不一样的。</p><ul><li><p>分类模型 GradientBoostingClassifier</p><ul><li>deviance[对数似然损失函数][默认]，类似与逻辑回归，可以做二分类和多分类，计算条件概率，输出概率</li><li>exponential[指数损失函数]，此时GradientBoostingClassifier退化到AdaBoost</li></ul></li><li><p>回归模型 GradientBoostingRegressor</p><ul><li>ls[最小均方差][默认]，适用于数据噪音少的情况</li><li>lad[最小绝对误差]</li><li>huber，适用于数据噪音多的情况。</li><li>quantile，适用于对数据集进行分段预测的时候</li></ul></li></ul><h2 id="Questions-1"><a href="#Questions-1" class="headerlink" title="Questions"></a>Questions</h2><h3 id="Q1-怎样设置单颗树的停止条件？"><a href="#Q1-怎样设置单颗树的停止条件？" class="headerlink" title="Q1: 怎样设置单颗树的停止条件？"></a>Q1: 怎样设置单颗树的停止条件？</h3><ul><li>节点分裂时的最小样本数 min_samples_split</li><li>叶子节点的最小样本数 min_samples_leaf</li><li>最大深度 max_depth</li><li>最大叶子节点数 max_leaf_nodes</li><li>最小不纯度衰减量 min_impurity_decrease</li></ul><h1 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h1><p>XGBoost是Boosting集大成者，对函数残差近似值进行梯度下降，迭代时利用了二阶梯度。</p><blockquote><p>以下是陈天奇博士论文<em>XGBoost: A Scalable Tree Boosting System</em>的原文翻译。</p></blockquote><h2 id="正则化的学习目标函数-Regularized-Learning-Objective"><a href="#正则化的学习目标函数-Regularized-Learning-Objective" class="headerlink" title="正则化的学习目标函数(Regularized Learning Objective)"></a>正则化的学习目标函数(Regularized Learning Objective)</h2><p>在给定n个样本m个特征的数据集，一个集成模型使用了K个基模型线性组合后预测输出。</p><p>$$\widehat{y}_i = \phi(x_i) = \sum ^K _{k=1} f_k(x_i), f_k \in F$$</p><p>其中：$F={f(x)=w_{q(x)}}(q:R^m \rightarrow T, w \in R^T)$表示回归树空间（通常值得是CART）。q表示样本到相应树上叶子节点索引的映射。T是回归树叶子节点数目。每一个$f_k$对应着一个独立树结构q和叶子节点权重w。与决策树不同的是（这里我想应该是指代分类决策树），每一颗回归树的叶子节点上包含了一个连续的socre，我们使用$w_i$表示第i个节点的score。</p><p>给出正则化目标函数$L(\phi) = \sum_il(\widehat{y}_i, y_i) + \sum_k \Omega(f_k)$</p><p>其中：$\Omega(f) = \gamma T + \frac{1}{2}\lambda |w|^2$，$l$可以是不同的凸损失函数，对预测值$\widehat{y}$和目标值$y$的不同程度进行度量。第二项$\Omega$惩罚了模型的复杂度。额外的正则化项有助于平滑最终的学习权重避免过拟合。正则化目标函数趋向于选择一个简单且有预测能力的模型。我们的目标函数和相应的学习算法更容易并行处理。当正则化参数设置为0时，目标函数回退到传统的梯度提升树。</p><h2 id="梯度提升树-Gradient-Tree-Boosting"><a href="#梯度提升树-Gradient-Tree-Boosting" class="headerlink" title="梯度提升树(Gradient Tree Boosting)"></a>梯度提升树(Gradient Tree Boosting)</h2><p>$\widehat{y}_i^{(t)}$表示第$t$次第$i$个实例，我们需要添加$f_t$最小化目标函数。</p><p>$$L^{(t)}=\sum_{i=1}^nl(y_i, \widehat{y}_i)+\Omega(f_t)$$</p><p>$$L^{(t)} = \sum_{i=1}^nl(y_i,\widehat{y}_i^{(t-1)} + f_t(x_i)) + \Omega(f_t)$$</p><p>我们贪婪地添加最能提升模型性能参数的$f_t$，二阶泰勒展开近似可以快速优化我们的目标。</p><p>二阶泰勒展开：</p><p>$$L^{(t)} \simeq \sum_{i=1}^n[l(y_i, \widehat{y}_i^{(t-1)}) +g_if_t(x_i) + \frac{1}{2}h_if_t^2(x_i)] + \Omega(f_t)$$</p><p>其中，$g_i = \partial_{\widehat{y}_i^{(t-1)}} l(y_i, \widehat{y}_i^{(t-1)})$，$h_i = \partial_{\widehat{y}_i^{(t-1)}}^2 l(y_i, \widehat{y}_i^{(t-1)})$分别为损失函数一阶和二阶的梯度统计参数，然后我们移除常数项可以得到</p><p>$$ \widetilde{L}^{(t)} = \sum_{i=1}^n [g_if_t(x_i) + \frac{1}{2}h_if_t^2(x_i)] + \Omega(f_t) $$</p><p>接着，定义$I_j = {i|q(i)=j}$表示叶子节点j上的样本集合，改写上式可以得到</p><p>$$ \widetilde{L}^{(t)} = \sum_{i=1}^n [g_if_t(x_i) + \frac{1}{2}h_if_t^2(x_i)] + \gamma T + \frac{1}{2}\lambda\sum_{j=1}^Tw_j^2$$</p><p>$$ \widetilde{L}^{(t)} = \sum_{j=1}^T [(\sum_{i\in j}g_i)w_j + \frac{1}{2}(\sum_{i\in j}h_i+\lambda)w_j^2] + \gamma T $$</p><p>对于一个固定的树结构$q(x)$，我们可以计算出叶子节点j最优的权重$w_j^*$，即</p><p>$$ w_j^* = -\frac{\sum_{i\in j}g_i}{\sum_{i\in j}h_i+\lambda} $$</p><p>从而计算出目标函数相应的最优值</p><p>$$ \widetilde{L}^{(t)} = -\frac{1}{2} \sum_{j=1}^T \frac{\sum_{i\in j}g_i}{\sum_{i\in j}h_i+\lambda} + \gamma T $$</p><p>上式可以作为一个度量一个树结构好坏的得分函数(scoring function)，该得分函数类似于评价决策树的不纯度得分，不同的是他可以使用多种多样的目标函数。</p><p>正常来说，遍历所有的树结构q是不可能的。所以通常使用贪婪算法，从一个叶子节点开始，迭代地添加支路。假设$I_L$和$I_R$是分裂后左节点和右节点的样本集合，令$I=I_L \cup I_R$，那么给出分裂后损失函数减少量的计算公式</p><p>$$ L_{split} = \frac{1}{2} [\frac{\sum_{i\in I_L}g_i}{\sum_{i\in I_L}h_i+\lambda} + \frac{\sum_{i\in I_R}g_i}{\sum_{i\in I_R}h_i+\lambda} - \frac{\sum_{i\in I}g_i}{\sum_{i\in I}h_i+\lambda}] + \gamma $$</p><p>上式通常用来评价分裂候选节点，即选出需要分裂的节点</p><h2 id="分裂搜算法"><a href="#分裂搜算法" class="headerlink" title="分裂搜算法"></a>分裂搜算法</h2><h3 id="精确贪婪算法-Exact-Greedy-Algorithm"><a href="#精确贪婪算法-Exact-Greedy-Algorithm" class="headerlink" title="精确贪婪算法(Exact Greedy Algorithm)"></a>精确贪婪算法(Exact Greedy Algorithm)</h3><p><img src="http://wx1.sinaimg.cn/mw690/715e29a9gy1fvg1ex1cbgj20dw094dgs.jpg" alt=""></p><h3 id="近似算法"><a href="#近似算法" class="headerlink" title="近似算法"></a>近似算法</h3><p><img src="http://wx3.sinaimg.cn/mw690/715e29a9gy1fvg1exeieij20ds072my3.jpg" alt=""></p><p>贪婪算法很强大，因为它贪婪地遍历了所有可能的分割points。但是，当数据集无法完全加载到内存中的，算法的效率很低。在处理分布式数据的时候同样会遇到这样的问题。因此，在这两种情况中，为了梯度提升树算法的效率，近似算法是必要的。</p><h2 id="Questions-2"><a href="#Questions-2" class="headerlink" title="Questions"></a>Questions</h2><h3 id="Q1：XGBoost如何并行？"><a href="#Q1：XGBoost如何并行？" class="headerlink" title="Q1：XGBoost如何并行？"></a>Q1：XGBoost如何并行？</h3><blockquote><p>以下是陈天奇论文原文翻译。</p></blockquote><p>在精确贪婪算法中，我们在一个block中存储整个数据集，然后运行分割搜索算法，该算法是通过线性的扫描预先排序好的条目。我们统一对所有的叶子节点进行分割搜索，这样一次扫描我们就可以搜集叶子支路上所有分割候选者的统计信息。</p><p>当使用近似算法的时候，block结构也能起作用。在这种情况下，将使用多个blocks。每一个block都对应着数据集的行子集。不同的block可以通过多个机器进行分布式，也可以存储在disk in the out-of-core setting。</p><ul><li>XGBoost并行不是在Tree粒度上并行的，而是在特征粒度上并行的。</li></ul><h3 id="Q2：给你一堆数据，请解释数据是如何在XGBoost模型内部运行的？"><a href="#Q2：给你一堆数据，请解释数据是如何在XGBoost模型内部运行的？" class="headerlink" title="Q2：给你一堆数据，请解释数据是如何在XGBoost模型内部运行的？"></a>Q2：给你一堆数据，请解释数据是如何在XGBoost模型内部运行的？</h3><ol><li>使用 <code>通用参数</code> 进行宏观上的设置。 <code>booster</code> 参数选择树学习器还是线性学习器。 <code>silent</code> 设置训练时是否输出训练的内容，比如树的深度、叶子节点的个数。 <code>nthread</code> 设置训练时的进程数。</li><li>设置学习的目标参数。 <code>objective</code> 设置模型的功能，是分类or回归，是二分类还是多分类，例如二分类时，可以采用 <code>rank: pairwise</code>。然后设置目标函数， <code>eval_metric</code>设置评估函数（也可以成为损失函数），比如auc。XGBoost的目标函数包含损失函数+正则项。</li><li>定义正则化参数，正则化参数控制了模型的复杂程度。主要包含三个参数： <code>gamma</code>——控制树的节点数量，该参数越大，算法越保守。 <code>lambda</code>——控制叶子节点score，该参数越大，算法越保守。</li><li><p>确定目标函数后，进入训练过程。</p><ul><li>基于数据集，拟合一颗CART决策树，训练完一个结果后，一棵树的结果一定是不准确的。经过评估函数评估误差后，进入下一颗树的生成过程。</li><li>第二颗树不是预测原目标，而是目标与上一颗树的残差，以目标函数的负梯度作为第二颗树的学习目标。</li><li>第三棵树学习前两棵树的总残差。这样学习，理论上我们学习的误差在一步步的减少。</li><li>……</li><li>反复迭代，知道迭代次数等于 <code>n_estimators</code></li><li>将之前所有的树加起来作为最后的训练结果。我们可以看到，将每棵树的值加起来，实际上是从原目标函数中每次都加上一个负梯度，也就相当于减去一个负梯度。这也是GBDT梯度下降的原理及核心。</li></ul></li></ol><blockquote><p>以上参考文章<a href="https://hk.saowen.com/a/6736386dcdae404c78c4aba68bf87cc451ea8c06b54077cfb40b9946b20be112" target="_blank" rel="noopener">LightGBM，XGBoost被面試官刁難了？內有含淚面試經驗</a></p></blockquote><h3 id="Q3：XGBoost中的-objective"><a href="#Q3：XGBoost中的-objective" class="headerlink" title="Q3：XGBoost中的 objective"></a>Q3：XGBoost中的 <code>objective</code></h3><p><code>objective</code>参数用来设置模型的任务即目的。可选的任务类型有：</p><ul><li>reg:linear: 线性回归</li><li>reg:logistic: 逻辑回归</li><li>binary:logistic: 适用于二分类的逻辑回归，输出概率</li><li>binary:logitraw: 适用于二分类的逻辑回归，输出logistic transformation之前的score，即$w^Tx$</li><li>binary:hinge: 适用于二分类的hinge loss。该设置是的预测值为0或者1，而不是产生概率。</li><li>gpu:reg:linear, gpu:reg:logistic, gpu:binary:logistic, gpu:binary:logitraw: 相应目标函数的GPU版本。需要注意的是，类似与GPU直方图算法，只有当整个训练部分使用相同的数据集时才可以使用。</li><li>count:poisson –poisson regression for count data, output mean of poisson distribution<ul><li>max_delta_step is set to 0.7 by default in poisson regression (used to safeguard optimization)</li></ul></li><li>survival:cox: Cox regression for right censored survival time data (negative values are considered right censored). Note that predictions are returned on the hazard ratio scale (i.e., as HR = exp(marginal_prediction) in the proportional hazard function h(t) = h0(t) * HR).</li><li>multi:softmax: XGBoost使用softmax函数处理多分类问题，同时需要设置 <code>num_class</code> ，即类别的个数</li><li>multi:softprob: 与softmax一样，但同时输出ndata <em> nclass的向量，同时可以将该向量转化为ndata </em> nclass的矩阵。每行表示样本属于每个类别的概率。</li><li>rank:pairwise: 使用LambdaMART进行pairwise排序，最小化pairwise损失函数。</li><li>rank:ndcg: Use LambdaMART to perform list-wise ranking where Normalized Discounted Cumulative Gain (NDCG) is maximized</li><li>rank:map: Use LambdaMART to perform list-wise ranking where Mean Average Precision (MAP) is maximized</li><li>reg:gamma: gamma regression with log-link. Output is a mean of gamma distribution. It might be useful, e.g., for modeling insurance claims severity, or for any outcome that might be gamma-distributed.</li><li>reg:tweedie: Tweedie regression with log-link. It might be useful, e.g., for modeling total loss in insurance, or for any outcome that might be Tweedie-distributed.</li></ul><h3 id="Q4：为什么XGBoost要用泰勒展开，优势在哪里？"><a href="#Q4：为什么XGBoost要用泰勒展开，优势在哪里？" class="headerlink" title="Q4：为什么XGBoost要用泰勒展开，优势在哪里？"></a>Q4：为什么XGBoost要用泰勒展开，优势在哪里？</h3><blockquote><p>题目来自<a href="https://www.julyedu.com/question/index" target="_blank" rel="noopener">七月在线面试题库</a></p></blockquote><p>xgboost使用了一阶和二阶偏导，利用了泰勒公式的二街展开，优点如下：</p><ul><li>二阶导数使得梯度下降的更准更快</li><li>可以在不选定损失函数具体形式的情况下, 仅仅依靠输入数据的值就可以进行叶子分裂优化计算, 本质上也就把损失函数的选取和模型算法优化/参数选择分开了. 这种去耦合增加了xgboost的适用性, 使得它按需选取损失函数, 可以用于分类, 也可以用于回归。</li></ul><h3 id="Q5：xgboost如何寻找最优特征？是有放回还是无放回的呢？"><a href="#Q5：xgboost如何寻找最优特征？是有放回还是无放回的呢？" class="headerlink" title="Q5：xgboost如何寻找最优特征？是有放回还是无放回的呢？"></a>Q5：xgboost如何寻找最优特征？是有放回还是无放回的呢？</h3><blockquote><p>题目来自<a href="https://www.julyedu.com/question/index" target="_blank" rel="noopener">七月在线面试题库</a></p></blockquote><ul><li>xgboost如何寻找最优特征？<ul><li>每一轮训练的过程中，计算$L_{split}$，给出每个特征的最大增益，最大增益的特征作为分裂依据，从而记忆了每个特征在模型训练时的重要度信息——从根到叶子节点之间的节点中涉及到某特征的次数作为该特征的重要性排序。</li></ul></li><li>是有放回还是无放回的呢？<ul><li>xgboost属于boosting集成学习方法, 样本是不放回的, 因而每轮计算样本不重复. 另一方面, xgboost支持子采样, 也就是每轮计算可以不使用全部样本, 以减少过拟合. 进一步地, xgboost 还有列采样, 每轮计算按百分比随机采样一部分特征, 既提高计算速度又减少过拟合。</li></ul></li></ul><h3 id="Q6：xgboost是如何处理缺失值的呢？"><a href="#Q6：xgboost是如何处理缺失值的呢？" class="headerlink" title="Q6：xgboost是如何处理缺失值的呢？"></a>Q6：xgboost是如何处理缺失值的呢？</h3><blockquote><p>答案来自<a href="https://www.zhihu.com/question/58230411" target="_blank" rel="noopener">怎么理解决策树、xgboost能处理缺失值？而有的模型(svm)对缺失值比较敏感呢?</a></p></blockquote><p>根据论文作者Tianqi Chen在论文中介绍，xgboost把缺失值当做稀疏矩阵来处理，本身节点分裂时不考虑缺失值，缺失值会被放到左子树和右子树,然后分别计算损失，选择较优的那一个，如果训练时没有出现缺失值，预测时出现了缺失值，那么默认被分类到右子树。</p><h1 id="GBDT和XGBoost之间的关系"><a href="#GBDT和XGBoost之间的关系" class="headerlink" title="GBDT和XGBoost之间的关系"></a>GBDT和XGBoost之间的关系</h1><p>XGBoost比GBDT好在哪里？</p><ul><li>XGBoost速度更快，因为它可以在特征粒度上进行并行计算</li><li>XGBoost利用泰勒展开式中的二阶导数</li><li>XGBoost加入了正则项，gamma用于控制树的节点个数，lambda用于控制权重w的L2模的平方和，降低了模型的方差，简化了模型，提高了模型的泛化能力</li><li>XGBoost支持列抽样col_sample，防止过拟合，还能j减少计算。</li><li>XGBoost支持对缺失值进行处理，对于有缺失值的样本，XGBoost可以自己学习出分裂它的方向。</li><li>XGBoost不仅支持CART基分类器，还支持线性分类器，如linear、lr</li><li>XGBoost支持自定义损失函数，只要函数满足二阶可导</li><li>XGBoost支持对稀疏数据进行处理</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] <a href="https://zhuanlan.zhihu.com/p/34679467" target="_blank" rel="noopener">RF、GBDT、XGBoost常见面试题整理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;百度“一面之缘”，还是非常感谢百度机器学习的面试官，给了很多中肯的建议，谢谢！&lt;/p&gt;
&lt;p&gt;本篇文章主要梳理一下GBDT和XGBoost之间的关系以及各自的知识点。&lt;/p&gt;
&lt;h1 id=&quot;DT&quot;&gt;&lt;a href=&quot;#DT&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="数据科学" scheme="https://blog.luoyanbin.cn/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="XGBoost" scheme="https://blog.luoyanbin.cn/tags/XGBoost/"/>
    
      <category term="GBDT" scheme="https://blog.luoyanbin.cn/tags/GBDT/"/>
    
  </entry>
  
  <entry>
    <title>牛客网在线编程Python3输入输出问题</title>
    <link href="https://blog.luoyanbin.cn/2018/08/04/the-Python3-input-and-output-in-nowcoder-online-program/"/>
    <id>https://blog.luoyanbin.cn/2018/08/04/the-Python3-input-and-output-in-nowcoder-online-program/</id>
    <published>2018-08-04T01:28:16.000Z</published>
    <updated>2018-11-22T12:00:11.593Z</updated>
    
    <content type="html"><![CDATA[<p>使用Python3进行牛客网在线编程时发现了一个问题<code>时间超限</code>，代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        line = sys.stdin.readline()</span><br><span class="line">    except:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><p>自测结果如下：</p><pre><code>自测结果不通过时间超限。（运行时间：2001ms，占用内存：0k）</code></pre><p>查了官方的<a href="https://www.nowcoder.com/discuss/276" target="_blank" rel="noopener">牛客网在线判题系统使用帮助</a>，上面读取输入的方法应该适合于Python2，下面给出Python3读取输入的标准写法，其他语言的可以去原文查看。</p><p><code>Python3</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import sys </span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    a = line.split()</span><br><span class="line">    print(int(a[0]) + int(a[1]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用Python3进行牛客网在线编程时发现了一个问题&lt;code&gt;时间超限&lt;/code&gt;，代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="Python基础" scheme="https://blog.luoyanbin.cn/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python" scheme="https://blog.luoyanbin.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>XGBoost调参</title>
    <link href="https://blog.luoyanbin.cn/2018/07/22/Set-XGBoost-Parameters/"/>
    <id>https://blog.luoyanbin.cn/2018/07/22/Set-XGBoost-Parameters/</id>
    <published>2018-07-22T13:18:25.000Z</published>
    <updated>2018-11-22T12:00:11.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XGBClassifier"><a href="#XGBClassifier" class="headerlink" title="XGBClassifier"></a>XGBClassifier</h1><blockquote><p>class xgboost.XGBClassifier(max_depth=3, learning_rate=0.1, n_estimators=100, silent=True, objective=’binary:logistic’, booster=’gbtree’, n_jobs=1, nthread=None, gamma=0, min_child_weight=1, max_delta_step=0, subsample=1, colsample_bytree=1, colsample_bylevel=1, reg_alpha=0, reg_lambda=1, scale_pos_weight=1, base_score=0.5, random_state=0, seed=None, missing=None, **kwargs)</p></blockquote><p>Bases: xgboost.sklearn.XGBModel, object</p><p>XGBoost classification的scikit-learn API接口。</p><h1 id="XGBClassifier-fit"><a href="#XGBClassifier-fit" class="headerlink" title="XGBClassifier.fit"></a>XGBClassifier.fit</h1><blockquote><p>fit(X, y, sample_weight=None, eval_set=None, eval_metric=None, early_stopping_rounds=None, verbose=True, xgb_model=None, sample_weight_eval_set=None)</p></blockquote><p>拟合gradient boosting classifier</p><h1 id="sklearn-model-selection-GridSearchCV"><a href="#sklearn-model-selection-GridSearchCV" class="headerlink" title="sklearn.model_selection.GridSearchCV"></a>sklearn.model_selection.GridSearchCV</h1><blockquote><p>class sklearn.model_selection.GridSearchCV(estimator, param_grid, scoring=None, fit_params=None, n_jobs=1, iid=True, refit=True, cv=None, verbose=0, pre_dispatch=‘2*n_jobs’, error_score=’raise’, return_train_score=’warn’)</p></blockquote><h1 id="调参步骤"><a href="#调参步骤" class="headerlink" title="调参步骤"></a>调参步骤</h1><h2 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;XGBClassifier&quot;&gt;&lt;a href=&quot;#XGBClassifier&quot; class=&quot;headerlink&quot; title=&quot;XGBClassifier&quot;&gt;&lt;/a&gt;XGBClassifier&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;class xgboost
      
    
    </summary>
    
      <category term="数据科学" scheme="https://blog.luoyanbin.cn/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="XGBoost" scheme="https://blog.luoyanbin.cn/tags/XGBoost/"/>
    
  </entry>
  
  <entry>
    <title>XGBoost参数设置</title>
    <link href="https://blog.luoyanbin.cn/2018/07/21/XGBoost-Parameters/"/>
    <id>https://blog.luoyanbin.cn/2018/07/21/XGBoost-Parameters/</id>
    <published>2018-07-21T08:04:51.000Z</published>
    <updated>2018-11-22T12:00:11.593Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://xgboost.readthedocs.io/en/latest/parameter.html" target="_blank" rel="noopener">XGBoost Parameters</a></p><p>在运行XGBoost之前，我们必须设置三种类型的参数：general parameters, booster parameters and task parameters.</p><ul><li><code>General parameters</code> 与我们使用哪一种提升器进行提升有关，通常可以选择树或者线性模型。</li><li><code>Booster parameters</code> 取决于你选的提升器</li><li><code>Learning task parameters</code> 取决于学习场景。例如：做回归任务时可能会使用不同的参数进行排名任务。</li><li><code>Command line</code> 与CLI版本的XGBoost有关。</li></ul><blockquote><p><code>Note</code><br>R模块中的参数<br>在R模块中可以使用<code>.</code>(点)在参数替换<code>_</code>(下划线)，例如：你可以使用max.depth 代替max_depth. 带有下划线的参数在R中同样是可用的。</p></blockquote><h1 id="General-parameters"><a href="#General-parameters" class="headerlink" title="General parameters"></a>General parameters</h1><ul><li><p>booster [default= gbtree ]</p><ul><li>决定使用哪种提升器(booster)。可以是gbtree, gblinear or dart; gbtree和dart使用树模型而gblinear使用线性函数.</li></ul></li><li><p>silent [default=0]</p><ul><li>0表示打印运行运行信息；1表示静默模式。</li></ul></li><li><p>nthread [default to maximum number of threads available if not set]</p><ul><li>运行XGBoost的并行线程数</li></ul></li><li><p>num_pbuffer [set automatically by XGBoost, no need to be set by user][XGBoost自动设置，用户不必设置]</p><ul><li>预测缓冲区的大小。通常设置为训练示例数量。缓冲区用来保存提升过程最后一步的预测结果。</li></ul></li><li><p>num_feature [set automatically by XGBoost, no need to be set by user][XGBoost自动设置，用户不必设置]</p><ul><li>提升过程中使用的特征尺度，设置为特征的最大尺度。</li></ul></li></ul><h1 id="Booster-parameters"><a href="#Booster-parameters" class="headerlink" title="Booster parameters"></a>Booster parameters</h1><h2 id="Parameters-for-Tree-Booster"><a href="#Parameters-for-Tree-Booster" class="headerlink" title="Parameters for Tree Booster"></a>Parameters for Tree Booster</h2><ul><li><p>eta [default=0.3, alias: learning_rate][默认0.3，又称学习率]</p><ul><li>在更新权重过程中使用步长缩小以防止过拟合。在每一步提升之后，我们可以直接获得新特征的权重，eta缩小了特征权重的变化，使得提升过程更加保守。</li><li>大小区间: [0,1]</li></ul></li><li><p>gamma [default=0, alias: min_split_loss][默认0，又称最小分割损失]</p><ul><li>在树的叶节点上进行进一步分割所需要的最小损失减少量。gamma越大，算法就越保守。</li><li>大小区间: [0,∞]</li></ul></li><li><p>max_depth [default=6]</p><ul><li>树的最大深度。增加该值将使得模型更加复杂，更容易导致过拟合。0表示不限制输的深度。需要强调的是，当grow_policy设置为depthwise时，该限制是必须的。</li><li>大小区间: [0,∞]</li></ul></li><li><p>min_child_weight [default=1]</p><ul><li>子节点所需的实例权重总和的最小值(hessian是什么意思？)。如果树的分割导致一个叶子节点的实例权重总和小于min_child_weight，那么将会停止进一步的分割。 在线性回归任务中，该参数对应于每个节点中需要的最小实例数。min_child_weight越大，算法越保守。</li><li>大小区间: [0,∞]</li></ul></li><li><p>max_delta_step [default=0]</p><ul><li>我们允许每个叶子节点输出的最大步长增量。（该参数还不太理解，先附上原文）Maximum delta step we allow each leaf output to be. If the value is set to 0, it means there is no constraint. If it is set to a positive value, it can help making the update step more conservative. Usually this parameter is not needed, but it might help in logistic regression when class is extremely imbalanced. Set it to value of 1-10 might help control the update.</li><li>大小区间: [0,∞]</li></ul></li><li><p>subsample [default=1]</p><ul><li>训练实例的子采样率。设置为0.5意味着在生成树之前，XGBoost将会随机抽取一半的训练数据。这将防止过拟合。子采样在每一次提升迭代时执行一次。</li><li>大小区间: (0,1]</li></ul></li><li><p>colsample_bytree [default=1]</p><ul><li>构造每颗树时使用的列的子采样率。Subsample ratio of columns when constructing each tree. 子采样在每一次提升迭代时执行一次。</li><li>大小区间: (0,1]</li></ul></li><li><p>colsample_bylevel [default=1]</p><ul><li>在每一个level，每一次分割时列的子采样率。每一次新的分割产生时子采样只会发生一次。当tree_method设置为hist时，该参数无效。</li><li>大小区间: (0,1]</li></ul></li><li><p>lambda [default=1, alias: reg_lambda]</p><ul><li>L2正则化项的权重。增加该参数的值将会使模型更加保守。</li></ul></li><li><p>alpha [default=0, alias: reg_alpha]</p><ul><li>L1正则化项的权重。增加该参数的值将会使模型更加保守。</li></ul></li><li><p>tree_method string [default= auto]</p><ul><li>XGBoost中树的构造算法。请在相关的论文中查看具体的描述。</li><li>分布式存储和外部存储器版本的仅支持tree_method=approx.</li><li>可选: auto, exact, approx, hist, gpu_exact, gpu_hist<ul><li>auto: 使用启发式方法选择最快算法。<ul><li>对于中小型数据集，将使用精确贪婪算法exact greedy (exact)</li><li>对于超大型数据集，将使用近似算法approximate algorithm (approx)</li><li>由于过去在单个机器中总是使用exact greedy，当approximate algorithm被采用时，用户将获得提醒这一选择的信息。</li></ul></li><li>exact: Exact greedy algorithm（精确贪婪算法）.</li><li>approx: Approximate greedy algorithm using quantile sketch and gradient histogram.</li><li>hist: Fast histogram optimized approximate greedy algorithm. It uses some performance improvements such as bins caching.</li><li>gpu_exact: GPU implementation of exact algorithm.</li><li>gpu_hist: GPU implementation of hist algorithm.</li></ul></li></ul></li><li><p>sketch_eps [default=0.03]</p><ul><li>当tree_method=approx，该参数才会被使用.</li><li>This roughly translates into O(1 / sketch_eps) number of bins. Compared to directly select number of bins, this comes with theoretical guarantee with sketch accuracy.</li><li>通常用户不必调整该参数。可以考虑设置一个较小的值，可以更准确的遍历分割候选节点。</li><li>range: (0, 1)</li></ul></li><li><p>scale_pos_weight [default=1]</p><ul><li>控制正负权重的平衡，对不平衡类有用（Control the balance of positive and negative weights, useful for unbalanced classes）. 考虑典型值：sum(negative instances) / sum(positive instances). 更多讨论，参见参数调整。另外可以查看Higgs的Kaggle竞赛demo for examples: R, py1, py2, py3.</li></ul></li><li><p>updater [default= grow_colmaker,prune]</p><ul><li>A comma separated string defining the sequence of tree updaters to run, providing a modular way to construct and to modify the trees. This is an advanced parameter that is usually set automatically, depending on some other parameters. However, it could be also set explicitly by a user. The following updater plugins exist:<ul><li>grow_colmaker: non-distributed column-based construction of trees.</li><li>distcol: distributed tree construction with column-based data splitting mode.</li><li>grow_histmaker: distributed tree construction with row-based data splitting based on global proposal of histogram counting.</li><li>grow_local_histmaker: based on local histogram counting.</li><li>grow_skmaker: uses the approximate sketching algorithm.</li><li>sync: synchronizes trees in all distributed nodes.</li><li>refresh: refreshes tree’s statistics and/or leaf values based on the current data. Note that no random subsampling of data rows is performed.</li><li>prune: prunes the splits where loss &lt; min_split_loss (or gamma).</li></ul></li><li>In a distributed setting, the implicit updater sequence value would be adjusted to grow_histmaker,prune.</li></ul></li><li><p>refresh_leaf [default=1]</p><ul><li>This is a parameter of the refresh updater plugin. When this flag is 1, tree leafs as well as tree nodes’ stats are updated. When it is 0, only node stats are updated.</li></ul></li><li><p>process_type [default= default]</p><ul><li>A type of boosting process to run.</li><li>Choices: default, update<ul><li>default: The normal boosting process which creates new trees.</li><li>update: Starts from an existing model and only updates its trees. In each boosting iteration, a tree from the initial model is taken, a specified sequence of updater plugins is run for that tree, and a modified tree is added to the new model. The new model would have either the same or smaller number of trees, depending on the number of boosting iteratons performed. Currently, the following built-in updater plugins could be meaningfully used with this process type: refresh, prune. With process_type=update, one cannot use updater plugins that create new trees.</li></ul></li></ul></li><li><p>grow_policy [default= depthwise]</p><ul><li>Controls a way new nodes are added to the tree.</li><li>Currently supported only if tree_method is set to hist.</li><li>Choices: depthwise, `lossguide<ul><li>depthwise: split at nodes closest to the root.</li><li>lossguide: split at nodes with highest loss change.</li></ul></li></ul></li><li><p>max_leaves [default=0]</p><ul><li>Maximum number of nodes to be added. Only relevant when grow_policy=lossguide is set.</li></ul></li><li><p>max_bin, [default=256]</p><ul><li>Only used if tree_method is set to hist.</li><li>Maximum number of discrete bins to bucket continuous features.</li><li>Increasing this number improves the optimality of splits at the cost of higher computation time.</li></ul></li><li><p>predictor, [default=<code>cpu_predictor</code>]</p><ul><li>The type of predictor algorithm to use. Provides the same results but allows the use of GPU or CPU.<ul><li>cpu_predictor: Multicore CPU prediction algorithm.</li><li>gpu_predictor: Prediction using GPU. Default when tree_method is gpu_exact or gpu_hist.</li></ul></li></ul></li></ul><h1 id="Learning-Task-Parameters"><a href="#Learning-Task-Parameters" class="headerlink" title="Learning Task Parameters"></a>Learning Task Parameters</h1><p>指定learning task和相应的learning objective. objective选项如下:</p><ul><li><p>objective [default=reg:linear]</p><ul><li>reg:linear: linear regression</li><li>reg:logistic: logistic regression</li><li>binary:logistic: logistic regression for binary classification, output probability</li><li>binary:logitraw: logistic regression for binary classification, output score before logistic transformation</li><li>gpu:reg:linear, gpu:reg:logistic, gpu:binary:logistic, gpu:binary:logitraw: versions of the corresponding objective functions evaluated on the GPU; note that like the GPU histogram algorithm, they can only be used when the entire training session uses the same dataset</li><li>count:poisson –poisson regression for count data, output mean of poisson distribution<ul><li>max_delta_step is set to 0.7 by default in poisson regression (used to safeguard optimization)</li></ul></li><li>survival:cox: Cox regression for right censored survival time data (negative values are considered right censored). Note that predictions are returned on the hazard ratio scale (i.e., as HR = exp(marginal_prediction) in the proportional hazard function h(t) = h0(t) * HR).</li><li>multi:softmax: set XGBoost to do multiclass classification using the softmax objective, you also need to set num_class(number of classes)</li><li>multi:softprob: same as softmax, but output a vector of ndata <em> nclass, which can be further reshaped to ndata </em> nclass matrix. The result contains predicted probability of each data point belonging to each class.</li><li>rank:pairwise: 设置XGBoost通过最小化成对损失（pairwise loss）来执行排名任务（ranking task）。</li><li>reg:gamma: gamma regression with log-link. Output is a mean of gamma distribution. It might be useful, e.g., for modeling insurance claims severity, or for any outcome that might be gamma-distributed.</li><li>reg:tweedie: Tweedie regression with log-link. It might be useful, e.g., for modeling total loss in insurance, or for any outcome that might be Tweedie-distributed.</li></ul></li><li><p>base_score [default=0.5]</p><ul><li>The initial prediction score of all instances, global bias</li><li>For sufficient number of iterations, changing this value will not have too much effect.</li></ul></li><li><p>eval_metric [default according to objective]</p><ul><li>验证数据的评估指标，根据objective给出默认的指标（回归：rmse；分类：error；排名：mean average precision）</li><li>用户可以添加多个评估指标。对于Python用户：记得将指标作为参数对list而不是map进行传递，防止后面的eval_metric不会覆盖前一个。</li><li>可选项如下:<ul><li>rmse: root mean square error</li><li>mae: mean absolute error</li><li>logloss: negative log-likelihood</li><li>error: Binary classification error rate. It is calculated as #(wrong cases)/#(all cases). For the predictions, the evaluation will regard the instances with prediction value larger than 0.5 as positive instances, and the others as negative instances.</li><li>error@t: a different than 0.5 binary classification threshold value could be specified by providing a numerical value through ‘t’.</li><li>merror: Multiclass classification error rate. It is calculated as #(wrong cases)/#(all cases).</li><li>mlogloss: Multiclass logloss.</li><li>auc: Area under the curve</li><li>ndcg: Normalized Discounted Cumulative Gain</li><li>map: Mean average precision</li><li>ndcg@n, map@n: ‘n’ can be assigned as an integer to cut off the top positions in the lists for evaluation.</li><li>ndcg-, map-, ndcg@n-, map@n-: In XGBoost, NDCG and MAP will evaluate the score of a list without any positive samples as 1. By adding “-” in the evaluation metric XGBoost will evaluate these score as 0 to be consistent under some conditions.</li><li>poisson-nloglik: negative log-likelihood for Poisson regression</li><li>gamma-nloglik: negative log-likelihood for gamma regression</li><li>cox-nloglik: negative partial log-likelihood for Cox proportional hazards regression</li><li>gamma-deviance: residual deviance for gamma regression</li><li>tweedie-nloglik: negative log-likelihood for Tweedie regression (at a specified value of the tweedie_variance_power parameter)</li></ul></li></ul></li><li><p>seed [default=0]</p><ul><li>Random number seed.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://xgboost.readthedocs.io/en/latest/parameter.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XGBoost Parameters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在运行XGBoost之
      
    
    </summary>
    
      <category term="数据科学" scheme="https://blog.luoyanbin.cn/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="XGBoost" scheme="https://blog.luoyanbin.cn/tags/XGBoost/"/>
    
  </entry>
  
  <entry>
    <title>XGBoost Python Package中文文档</title>
    <link href="https://blog.luoyanbin.cn/2018/07/20/Using-xgboost-in-Python/"/>
    <id>https://blog.luoyanbin.cn/2018/07/20/Using-xgboost-in-Python/</id>
    <published>2018-07-20T07:22:23.000Z</published>
    <updated>2018-11-22T12:00:11.593Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://xgboost.readthedocs.io/en/latest/python/" target="_blank" rel="noopener">XGBoost Python Package英文文档</a></p><h1 id="安装XGBoost"><a href="#安装XGBoost" class="headerlink" title="安装XGBoost"></a>安装XGBoost</h1><ul><li><a href="http://xgboost.readthedocs.io/en/latest/build.html" target="_blank" rel="noopener">安装引导文档</a></li><li>验证是否安装成功</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br></pre></td></tr></table></figure><h1 id="数据接口"><a href="#数据接口" class="headerlink" title="数据接口"></a>数据接口</h1><p>XGBoost的Python模块可以从以下几种文件导入数据：</p><ul><li>LibSVM text format file</li><li>Comma-separated values (CSV) file</li><li>NumPy 2D array</li><li>SciPy 2D sparse array</li><li>XGBoost binary buffer file</li></ul><p>点击<a href="http://xgboost.readthedocs.io/en/latest/tutorials/input_format.html" target="_blank" rel="noopener">Text Input Format of DMatrix</a>查看具体的text输入形式</p><p>这些数据存储在DMatrix对象中。</p><ul><li>导入a libsvm text文件或者a XGBoost binary文件到DMatrix:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dtrain = xgb.DMatrix(<span class="string">'train.svm.txt'</span>)</span><br><span class="line">dtest = xgb.DMatrix(<span class="string">'test.svm.buffer'</span>)</span><br></pre></td></tr></table></figure><ul><li>导入a CSV file到DMatrix:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># label_column specifies the index of the column containing the true label</span></span><br><span class="line">dtrain = xgb.DMatrix(<span class="string">'train.csv?format=csv&amp;label_column=0'</span>)</span><br><span class="line">dtest = xgb.DMatrix(<span class="string">'test.csv?format=csv&amp;label_column=0'</span>)</span><br></pre></td></tr></table></figure><p>(需要强调的是，XGBoost不支持categorical features; 如果你的数据包含categorical features, 先把它加载成a NumPy数组，然后进行独热编码.)</p><ul><li>导入a NumPy array到DMatrix:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = np.random.rand(<span class="number">5</span>, <span class="number">10</span>)  <span class="comment"># 5 entities, each contains 10 features</span></span><br><span class="line">label = np.random.randint(<span class="number">2</span>, size=<span class="number">5</span>)  <span class="comment"># binary target</span></span><br><span class="line">dtrain = xgb.DMatrix(data, label=label)</span><br></pre></td></tr></table></figure><ul><li>导入a scipy.sparse array到DMatrix:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">csr = scipy.sparse.csr_matrix((dat, (row, col)))</span><br><span class="line">dtrain = xgb.DMatrix(csr)</span><br></pre></td></tr></table></figure><ul><li>保存数据到a XGBoost binary文件可以提高导入速度:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dtrain = xgb.DMatrix(<span class="string">'train.svm.txt'</span>)</span><br><span class="line">dtrain.save_binary(<span class="string">'train.buffer'</span>)</span><br></pre></td></tr></table></figure><ul><li>缺失值可以在DMatrix的构造函数中被默认值替代:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dtrain = xgb.DMatrix(data, label=label, missing=<span class="number">-999.0</span>)</span><br></pre></td></tr></table></figure><ul><li>在需要的时候可以设置权重：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w = np.random.rand(<span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">dtrain = xgb.DMatrix(data, label=label, missing=<span class="number">-999.0</span>, weight=w)</span><br></pre></td></tr></table></figure><h1 id="设置参数"><a href="#设置参数" class="headerlink" title="设置参数"></a>设置参数</h1><p>XGBoost可以使用a list of pairs或者字典设置参数。例如：</p><ul><li>提升器参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">param = &#123;<span class="string">'max_depth'</span>: <span class="number">2</span>, <span class="string">'eta'</span>: <span class="number">1</span>, <span class="string">'silent'</span>: <span class="number">1</span>, <span class="string">'objective'</span>: <span class="string">'binary:logistic'</span>&#125;</span><br><span class="line">param[<span class="string">'nthread'</span>] = <span class="number">4</span></span><br><span class="line">param[<span class="string">'eval_metric'</span>] = <span class="string">'auc'</span></span><br></pre></td></tr></table></figure><ul><li>你也可以指定多个指标：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">param[<span class="string">'eval_metric'</span>] = [<span class="string">'auc'</span>, <span class="string">'ams@0'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># alternatively:</span></span><br><span class="line"><span class="comment"># plst = param.items()</span></span><br><span class="line"><span class="comment"># plst += [('eval_metric', 'ams@0')]</span></span><br></pre></td></tr></table></figure><ul><li>指定验证集查看模型性能</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evallist = [(dtest, <span class="string">'eval'</span>), (dtrain, <span class="string">'train'</span>)]</span><br></pre></td></tr></table></figure><h1 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h1><p>训练一个模型需要参数列表和数据集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num_round = <span class="number">10</span></span><br><span class="line">bst = xgb.train(param, dtrain, num_round, evallist)</span><br></pre></td></tr></table></figure><p>训练之后，可以保存模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bst.save_model(<span class="string">'0001.model'</span>)</span><br></pre></td></tr></table></figure><p>模型和它的feature map也可以输出成text文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dump model</span></span><br><span class="line">bst.dump_model(<span class="string">'dump.raw.txt'</span>)</span><br><span class="line"><span class="comment"># dump model with feature map</span></span><br><span class="line">bst.dump_model(<span class="string">'dump.raw.txt'</span>, <span class="string">'featmap.txt'</span>)</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>上面保存的模型可以通过一下代码加载：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bst = xgb.Booster(&#123;<span class="string">'nthread'</span>: <span class="number">4</span>&#125;)  <span class="comment"># init model</span></span><br><span class="line">bst.load_model(<span class="string">'model.bin'</span>)  <span class="comment"># load data</span></span><br></pre></td></tr></table></figure><h1 id="提前停止-Early-Stopping"><a href="#提前停止-Early-Stopping" class="headerlink" title="提前停止(Early Stopping)"></a>提前停止(Early Stopping)</h1><p>如果你有一个验证集，你可以使用early stopping寻找一个最优的提升次数。Early Stopping需要evals中至少有一个验证集。如果evals中的验证集多于一个，将会使用最后一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train(..., evals=evals, early_stopping_rounds=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>模型将会一直训练直到验证集的score不再提升。验证集误差需要再每early_stopping_rounds轮中保持减少，模型才会继续训练。</p><p>如果提前停止发生了，模型将会有三个额外的fields：bst.best_score, bst.best_iteration and bst.best_ntree_limit。需要强调的是，xgboost.train()将会返回最后一次迭代的模型，而不是最好的一个。</p><p>这适用于两种指标：最小化（RMSE，log loss等）和最大化（MAP，NDCG，AUC）。需要强调的是，如果你在param[‘eval_metric’]中指定了多种评价指标，最后一个指标将会被用到early stopping中。</p><h1 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h1><p>训练好或者加载的模型可以预测数据集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7 entities, each contains 10 features</span></span><br><span class="line">data = np.random.rand(<span class="number">7</span>, <span class="number">10</span>)</span><br><span class="line">dtest = xgb.DMatrix(data)</span><br><span class="line">ypred = bst.predict(dtest)</span><br></pre></td></tr></table></figure><p>如果在训练的时候开启了提前停止功能，你可以通过bst.best_ntree_limit获得最优迭代次数下的预测值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ypred = bst.predict(dtest, ntree_limit=bst.best_ntree_limit)</span><br></pre></td></tr></table></figure><h1 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h1><p>你可以使用plotting模块对importance and output tree进行绘图展示。</p><p>绘制importance，可以使用xgboost.plot_importance()。该函数需要安装依赖库matplotlib。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xgb.plot_importance(bst)</span><br></pre></td></tr></table></figure><p>通过matplotlib绘制输出树，可以使用xgboost.plot_tree()，需要指定目标树的序号。这个函数需要依赖库graphviz和matplotlib。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xgb.plot_tree(bst, num_trees=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>当你使用IPython，你可以使用xgboost.to_graphviz()函数；该函数将目标树转换成一个graphviz实例。这个graphviz实例将在IPython中自动被渲染。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xgb.to_graphviz(bst, num_trees=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://xgboost.readthedocs.io/en/latest/python/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XGBoost Python Package英文文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;安装XGB
      
    
    </summary>
    
      <category term="数据科学" scheme="https://blog.luoyanbin.cn/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="Python" scheme="https://blog.luoyanbin.cn/tags/Python/"/>
    
      <category term="XGBoost" scheme="https://blog.luoyanbin.cn/tags/XGBoost/"/>
    
  </entry>
  
  <entry>
    <title>数据竞赛要点</title>
    <link href="https://blog.luoyanbin.cn/2018/07/18/%E6%95%B0%E6%8D%AE%E7%AB%9E%E8%B5%9B%E8%A6%81%E7%82%B9/"/>
    <id>https://blog.luoyanbin.cn/2018/07/18/数据竞赛要点/</id>
    <published>2018-07-18T08:44:28.000Z</published>
    <updated>2018-11-22T12:00:11.593Z</updated>
    
    <content type="html"><![CDATA[<p>视频链接：<a href="https://tianchi.aliyun.com/forum/videoStream.html?spm=5176.11510288.4851200.17.4ccdb7bdkY699G&amp;postsId=5594#postsId=5594" target="_blank" rel="noopener">从0-1的数据竞赛经验分享</a></p><h1 id="0-所需能力"><a href="#0-所需能力" class="headerlink" title="0 所需能力"></a>0 所需能力</h1><h2 id="0-1-工具"><a href="#0-1-工具" class="headerlink" title="0.1 工具"></a>0.1 工具</h2><ul><li>语言：Python</li><li>库：Pandas, Numpy, Sklearn, Scipy, Seaborn, Keras, Xgboost, Lightgbm</li></ul><h2 id="0-2-参考书籍"><a href="#0-2-参考书籍" class="headerlink" title="0.2 参考书籍"></a>0.2 参考书籍</h2><ul><li>李航《统计学习方法》</li><li>周老师《机器学习》</li></ul><h1 id="1-建模工作框架"><a href="#1-建模工作框架" class="headerlink" title="1 建模工作框架"></a>1 建模工作框架</h1><p><img src="http://wx3.sinaimg.cn/mw690/715e29a9gy1fthgbb8gycj20ij09u0t4.jpg" alt="数据竞赛 - 建模工作框架"></p><h1 id="2-数据预处理"><a href="#2-数据预处理" class="headerlink" title="2 数据预处理"></a>2 数据预处理</h1><p>删除噪音，获得更加干净的数据</p><h2 id="2-1缺失值处理"><a href="#2-1缺失值处理" class="headerlink" title="2.1缺失值处理"></a>2.1缺失值处理</h2><ol><li>缺失严重（达到90%）：直接删除特征列</li><li>单条记录缺失严重（达到90%）：直接删除记录</li><li>缺失不严重（低于90%）：填充均值、中位数、单独生成一列0-1，或根据相关性高的特征进行还原</li></ol><h2 id="2-2-奇异值处理"><a href="#2-2-奇异值处理" class="headerlink" title="2.2 奇异值处理"></a>2.2 奇异值处理</h2><ol><li>转化为非奇异值</li><li>无法修整，直接删除</li><li>区分标签与特征的处理</li></ol><h2 id="2-3-特殊的预处理"><a href="#2-3-特殊的预处理" class="headerlink" title="2.3 特殊的预处理"></a>2.3 特殊的预处理</h2><ol><li>流量的归一化</li><li>图像的标准化</li></ol><h1 id="3-特征工程"><a href="#3-特征工程" class="headerlink" title="3 特征工程"></a>3 特征工程</h1><h2 id="3-1-人工特征：人为构建，基于个人水平和经验"><a href="#3-1-人工特征：人为构建，基于个人水平和经验" class="headerlink" title="3.1 人工特征：人为构建，基于个人水平和经验"></a>3.1 人工特征：人为构建，基于个人水平和经验</h2><ol><li>覆盖面越多越好</li><li>覆盖角度越多越好（宏观到微观）</li><li>与预测目标相关的所有信息全部加入</li></ol><h2 id="3-2-机器特征：模型的生成，模型的理解"><a href="#3-2-机器特征：模型的生成，模型的理解" class="headerlink" title="3.2 机器特征：模型的生成，模型的理解"></a>3.2 机器特征：模型的生成，模型的理解</h2><ol><li>PCA，FLD特征</li><li>GBDT输出的路径特征</li><li>神经网络特征（AutoEncoder等）</li></ol><h2 id="3-3-自动化特征轮：AutoML（流行），可根据经验自行设计"><a href="#3-3-自动化特征轮：AutoML（流行），可根据经验自行设计" class="headerlink" title="3.3 自动化特征轮：AutoML（流行），可根据经验自行设计"></a>3.3 自动化特征轮：AutoML（流行），可根据经验自行设计</h2><h1 id="4-模型"><a href="#4-模型" class="headerlink" title="4 模型"></a>4 模型</h1><p>逼近上界</p><h2 id="4-1-最为流行的模型"><a href="#4-1-最为流行的模型" class="headerlink" title="4.1 最为流行的模型"></a>4.1 最为流行的模型</h2><h3 id="4-1-1-单模型"><a href="#4-1-1-单模型" class="headerlink" title="4.1.1 单模型"></a>4.1.1 单模型</h3><ol><li>结构化数据类：XGBoost，LightGBM等</li><li>推荐类：FFM等</li><li>图像+文本类：各种神经网络</li></ol><h3 id="4-1-2-模型融合"><a href="#4-1-2-模型融合" class="headerlink" title="4.1.2 模型融合"></a>4.1.2 模型融合</h3><ol><li>均值集成，加权集成，Rank集成</li><li>Stacking：简单的5折Stacking，StackNet等</li></ol><h2 id="4-2-如何让模型更好的消化数据？"><a href="#4-2-如何让模型更好的消化数据？" class="headerlink" title="4.2 如何让模型更好的消化数据？"></a>4.2 如何让模型更好的消化数据？</h2><p>目前80%~90%的比赛冠军方案都是基于LGB，XGB，RF，GBDT模型</p><p><img src="http://wx1.sinaimg.cn/mw690/715e29a9gy1fthgbblp15j20is05lq32.jpg" alt="模型的反作用"></p><h3 id="4-2-1-反作用数据预处理"><a href="#4-2-1-反作用数据预处理" class="headerlink" title="4.2.1 反作用数据预处理"></a>4.2.1 反作用数据预处理</h3><ol><li>数据过少不具有代表性的：删除</li><li>方差较小不具有代表性的：删除</li></ol><h3 id="4-2-2-反作用特征工程"><a href="#4-2-2-反作用特征工程" class="headerlink" title="4.2.2 反作用特征工程"></a>4.2.2 反作用特征工程</h3><ol><li>一阶、二阶、三阶+固定属性特征</li><li>不同的比赛略有不同</li></ol><h2 id="5-数据分析"><a href="#5-数据分析" class="headerlink" title="5 数据分析"></a>5 数据分析</h2><p>一般质的飞跃都在这个阶段</p><ol><li>数据标签分析：好的label构建，成功了一半</li><li><p>数据特征分析：</p><p> a) 设计更好的特征<br> b) 设计强特</p></li><li><p>结果分析</p><p> a) 根据预测结果设计Tricks<br> b) 李勇预测结果设计更为高级的算法，例如：基于RF概率的KNN修正</p></li></ol><h1 id="一个完整的机器学习项目的流程"><a href="#一个完整的机器学习项目的流程" class="headerlink" title="一个完整的机器学习项目的流程"></a>一个完整的机器学习项目的流程</h1><ol><li>把实际问题抽象成一个数学问题，确定机器学习的目标，即<code>分类</code>or<code>回归</code>or<code>聚类</code></li><li>获取数据<ul><li>数据本身：具有代表性</li><li>类别问题：避免类别不平衡问题</li><li>dataSize：数据太大或者特征太多，可以考虑使用分布式处理数据</li></ul></li><li>数据预处理<ul><li>归一化</li><li>标准化</li><li>因子化</li><li>离散化</li><li>缺失值处理</li><li>去除共线性</li></ul></li><li>数据集探索与数据可视化<ul><li>探索、分析数据，可视化是重要的工具</li></ul></li><li>特征工程与特征工程<ul><li>特征工程：提取特征</li><li>特征选择：筛选特征<ul><li>特征有效性分析技术<ul><li>相关系数</li><li>卡方检验</li><li>平均互信息</li><li>条件熵</li><li>后验概率</li><li>逻辑回归权重</li></ul></li></ul></li></ul></li><li>选择模型，训练模型，参数调优<ul><li>sklearn中封装了常用的传统机器学习方法，根据我们学习的任务内容，选择合适的模型</li><li>（超）参数调优是难点，需要对使用的机器学习方法有很好的理解</li></ul></li><li>模型诊断<ul><li>常使用交叉验证，绘制学习曲线的方法判断是否<code>过拟合</code>or<code>欠拟合</code><ul><li>过拟合：增加数据，减少模型的复杂度</li><li>欠拟合：提高数据集特征的数量，增加模型的复杂度</li></ul></li><li>误差分析：观察误差样本 -&gt; 分析原因 -&gt; 参数原因or模型原因or特征原因or数据本身</li></ul></li><li>模型融合<ul><li>有一定的提升效果</li><li>工程上提升准确度主要通过：（标准可复制、效果稳定）<ul><li>模型的前端，即数据预处理、特征工程、数据清洗</li><li>模型的后端，即模型融合</li></ul></li><li>调参使用较少，数据量大难以GridSearch</li></ul></li><li>模型上线运行<ul><li>需要考虑的因素有：<ul><li>准确度</li><li>误差</li><li>时间复杂度</li><li>空间复杂度</li><li>稳定性</li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;视频链接：&lt;a href=&quot;https://tianchi.aliyun.com/forum/videoStream.html?spm=5176.11510288.4851200.17.4ccdb7bdkY699G&amp;amp;postsId=5594#postsId=5594
      
    
    </summary>
    
      <category term="数据科学" scheme="https://blog.luoyanbin.cn/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="Kaggle" scheme="https://blog.luoyanbin.cn/tags/Kaggle/"/>
    
      <category term="天池" scheme="https://blog.luoyanbin.cn/tags/%E5%A4%A9%E6%B1%A0/"/>
    
      <category term="数据竞赛" scheme="https://blog.luoyanbin.cn/tags/%E6%95%B0%E6%8D%AE%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>逻辑斯谛回归模型</title>
    <link href="https://blog.luoyanbin.cn/2018/07/11/Logitstic-Regression/"/>
    <id>https://blog.luoyanbin.cn/2018/07/11/Logitstic-Regression/</id>
    <published>2018-07-11T03:48:18.000Z</published>
    <updated>2018-11-22T12:00:11.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逻辑斯谛分布"><a href="#逻辑斯谛分布" class="headerlink" title="逻辑斯谛分布"></a>逻辑斯谛分布</h1><p><strong>X</strong>是连续随机变量，其分布函数和密度函数为</p><p>$$F(x) = P(X &lt;= x) = \frac{1}{1+e^{-(x-\mu)/\gamma}}$$</p><p>$$f(x) = F’(x) = {\frac{e^{-(x-\mu)/\gamma}}{\gamma(1+e^{-(x-\mu)/\gamma})}}$$</p><p>式中：$\mu$是位置参数，$\gamma$是形状参数</p><p>其分布函数即为逻辑斯谛函数，其图形为S形曲线（sigmoid curve），该曲线以（$\mu$,1/2）中心对称，满足</p><p>$$F(-x+\mu) - 1/2 = -F(x-\mu) + 1/2$$</p><h1 id="二项逻辑斯谛回归模型"><a href="#二项逻辑斯谛回归模型" class="headerlink" title="二项逻辑斯谛回归模型"></a>二项逻辑斯谛回归模型</h1><p>$$ P(Y=1|x) = \frac{exp(w \cdot x)}{1+exp(w \cdot x)}$$<br>$$ P(Y=0|x) = \frac{1}{1+exp(w \cdot x)}$$</p><p>式中：$x = (x^{(1)}, x^{(2)}, \dots, x^{(n)}, 1)^T$，$Y = (w^{(1)}, w^{(2)}, \dots, w^{(n)}, b)^T$, 其中$w$是权值向量，$b$为偏置。</p><p><code>逻辑斯谛回归模型</code>的特点为：输出Y=1的对数几率是由输入x的线性函数表示的模型，即为逻辑斯谛回归模型</p><p><code>对数几率</code></p><p>$$ logit(P) = \log \frac{p}{1-p} $$</p><p>$$ logit(P(Y = 1|x)) = \log \frac{P(Y = 1|x)}{1 - P(Y = 1| x)} = w \cdot x $$</p><p>即逻辑斯谛回归模型的对数几率是x的线性函数！！！</p><h1 id="模型参数估计"><a href="#模型参数估计" class="headerlink" title="模型参数估计"></a>模型参数估计</h1><p><code>训练数据集</code>$D = {(x_1, y_1), (x_2, y_2), \dots, (x_N, y_N)}$，其中，$x_i \in R^n, y_i \in {0, 1}$</p><p><code>估计方法</code>极大似然法</p><p><code>过程</code>设：$P(Y=1|x) = \pi(x), P(Y=0|x) = 1 - \pi(x)$</p><p>似然函数</p><p>$$\prod^N_{i=1} [\pi(x_i)]^{y_i}[1-\pi(x_i)]^{1-y_i}$$</p><p>对数似然函数</p><p>$$L(w) = \sum^N_{i=1} [y_i\log\pi(x_i) + (1-y_i)\log(1 - \pi(x_i))] = \sum^N_{i=1} [y_i\log\frac{\pi(x_i)}{1 - \pi(x_i)} + \log(1 - \pi(x_i))]$$</p><p>根据逻辑斯谛回归模型的对数几率特性</p><p>$$L(w) = \sum^N_{i=1} [y_i(w \cdot x_i) - \log (1 + exp(w \cdot x_i))]$$</p><p>对L(w)求取极大值得到$w$的估计值$\widehat{w}$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;逻辑斯谛分布&quot;&gt;&lt;a href=&quot;#逻辑斯谛分布&quot; class=&quot;headerlink&quot; title=&quot;逻辑斯谛分布&quot;&gt;&lt;/a&gt;逻辑斯谛分布&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;X&lt;/strong&gt;是连续随机变量，其分布函数和密度函数为&lt;/p&gt;
&lt;p&gt;$$F(x) = 
      
    
    </summary>
    
      <category term="数据科学" scheme="https://blog.luoyanbin.cn/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="Logitsic Regression" scheme="https://blog.luoyanbin.cn/tags/Logitsic-Regression/"/>
    
      <category term="Machine Learning" scheme="https://blog.luoyanbin.cn/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>修改Mysql的数据库存储路径</title>
    <link href="https://blog.luoyanbin.cn/2018/07/04/modify-the-datadir-of-mysql/"/>
    <id>https://blog.luoyanbin.cn/2018/07/04/modify-the-datadir-of-mysql/</id>
    <published>2018-07-04T07:48:55.000Z</published>
    <updated>2018-11-22T12:00:11.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows7下修改Mysql的数据库存储路径"><a href="#Windows7下修改Mysql的数据库存储路径" class="headerlink" title="Windows7下修改Mysql的数据库存储路径"></a>Windows7下修改Mysql的数据库存储路径</h1><h2 id="查看Mysql默认的数据库存储路径"><a href="#查看Mysql默认的数据库存储路径" class="headerlink" title="查看Mysql默认的数据库存储路径"></a>查看Mysql默认的数据库存储路径</h2><ul><li>打开MYSQL 5.7 Command Line Client</li><li>输入命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &quot;%datadir%&quot;;</span><br></pre></td></tr></table></figure><p>默认的数据库存储路径为：C:\ProgramData\MySQL\MySQL Server 5.7\Data\</p><h2 id="停止Mysql服务"><a href="#停止Mysql服务" class="headerlink" title="停止Mysql服务"></a>停止Mysql服务</h2><h2 id="创建新的数据库存放目录"><a href="#创建新的数据库存放目录" class="headerlink" title="创建新的数据库存放目录"></a>创建新的数据库存放目录</h2><ul><li>我的数据库存放目录为：F:\ProgramData\MySQL\MySQL Server 5.7\Data\</li></ul><h2 id="修改my-ini"><a href="#修改my-ini" class="headerlink" title="修改my.ini"></a>修改my.ini</h2><ul><li>my.ini的路径为：C:\ProgramData\MySQL\MySQL Server 5.7\my.ini</li><li>打开后找到<code>datadir=</code></li><li>修改为datadir=F:\ProgramData\MySQL\MySQL Server 5.7\Data</li></ul><h2 id="重启Mysql服务"><a href="#重启Mysql服务" class="headerlink" title="重启Mysql服务"></a>重启Mysql服务</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Windows7下修改Mysql的数据库存储路径&quot;&gt;&lt;a href=&quot;#Windows7下修改Mysql的数据库存储路径&quot; class=&quot;headerlink&quot; title=&quot;Windows7下修改Mysql的数据库存储路径&quot;&gt;&lt;/a&gt;Windows7下修改Mys
      
    
    </summary>
    
      <category term="数据库基础" scheme="https://blog.luoyanbin.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Mysql" scheme="https://blog.luoyanbin.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>牛客网华为机试：Using Python</title>
    <link href="https://blog.luoyanbin.cn/2018/06/29/Python-written-examinatioon/"/>
    <id>https://blog.luoyanbin.cn/2018/06/29/Python-written-examinatioon/</id>
    <published>2018-06-29T03:09:42.000Z</published>
    <updated>2018-11-22T12:00:11.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><blockquote><p><code>题目描述</code>计算字符串最后一个单词的长度，单词以空格隔开。</p></blockquote><blockquote><p><code>输入描述</code>一行字符串，非空，长度小于5000。</p></blockquote><blockquote><p><code>输出描述</code>整数N，最后一个单词的长度。</p></blockquote><blockquote><p><code>示例1</code>输入：hello world  输出：5</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def function():</span><br><span class="line">    a = input()</span><br><span class="line">    if &apos; &apos; not in a:</span><br><span class="line">        print(len(a))</span><br><span class="line">    else:</span><br><span class="line">        sp = a.split(&apos; &apos;)</span><br><span class="line">        print(len(sp[-1]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function()</span><br></pre></td></tr></table></figure><h1 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h1><blockquote><p><code>题目描述</code>写出一个程序，接受一个有字母和数字以及空格组成的字符串，和一个字符，然后输出输入字符串中含有该字符的个数。不区分大小写。</p></blockquote><blockquote><p><code>输入描述</code>输入一个有字母和数字以及空格组成的字符串，和一个字符。</p></blockquote><blockquote><p><code>输出描述</code>输出输入字符串中含有该字符的个数。</p></blockquote><blockquote><p><code>示例1</code>输入：ABCDEF A  输出：1</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def function():</span><br><span class="line">    a = input()</span><br><span class="line">    b = input()</span><br><span class="line">    count = 0</span><br><span class="line">    if (ord(b) &gt;= 97) and (ord(b) &lt;= 122):</span><br><span class="line">        for el in a:</span><br><span class="line">            if (ord(el) == ord(b)) or (ord(el) == (ord(b) - 32)):</span><br><span class="line">                count += 1</span><br><span class="line">    elif (ord(b) &gt;= 65) and (ord(b) &lt;= 90):</span><br><span class="line">        for el in a:</span><br><span class="line">            if (ord(el) == ord(b)) or (ord(el) == (ord(b) + 32)):</span><br><span class="line">                count += 1</span><br><span class="line">    else:</span><br><span class="line">        for el in a:</span><br><span class="line">            if ord(el) == ord(b):</span><br><span class="line">                count += 1</span><br><span class="line">    print(count)</span><br><span class="line"></span><br><span class="line">function()</span><br></pre></td></tr></table></figure><h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><blockquote><p><code>题目描述</code>明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N≤1000），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成“去重”与“排序”的工作。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input Param </span><br><span class="line"></span><br><span class="line">     n               输入随机数的个数     </span><br><span class="line"></span><br><span class="line">     inputArray      n个随机整数组成的数组</span><br><span class="line"></span><br><span class="line">Return Value</span><br><span class="line"></span><br><span class="line">     OutputArray    输出处理后的随机整数</span><br><span class="line"></span><br><span class="line">注：测试用例保证输入参数的正确性，答题者无需验证。测试用例不止一组。</span><br></pre></td></tr></table></figure><blockquote><p><code>输入描述</code>输入多行，先输入随机整数的个数，再输入相应个数的整数</p></blockquote><blockquote><p><code>输出描述</code>返回多行，处理后的结果</p></blockquote><blockquote><p><code>示例1</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">-----</span><br><span class="line">11</span><br><span class="line">10</span><br><span class="line">20</span><br><span class="line">40</span><br><span class="line">32</span><br><span class="line">67</span><br><span class="line">40</span><br><span class="line">20</span><br><span class="line">89</span><br><span class="line">300</span><br><span class="line">400</span><br><span class="line">15</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">-----</span><br><span class="line">10</span><br><span class="line">15</span><br><span class="line">20</span><br><span class="line">32</span><br><span class="line">40</span><br><span class="line">67</span><br><span class="line">89</span><br><span class="line">300</span><br><span class="line">400</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        n = int(input())</span><br><span class="line">        inputArray = []</span><br><span class="line">        for i in range(n):</span><br><span class="line">            inputArray.append(int(input()))</span><br><span class="line">        outputArray = list(set(inputArray))</span><br><span class="line">        outputArray.sort()</span><br><span class="line">        for el in outputArray:</span><br><span class="line">            print(el)</span><br><span class="line">    except:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h1 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h1><blockquote><p><code>题目描述</code>•连续输入字符串，请按长度为8拆分每个字符串后输出到新的字符串数组；<br>•长度不是8整数倍的字符串请在后面补数字0，空字符串不处理。 </p></blockquote><blockquote><p><code>输入描述</code>连续输入字符串(输入2次,每个字符串长度小于100)</p></blockquote><blockquote><p><code>输出描述</code>输出到长度为8的新字符串数组</p></blockquote><blockquote><p><code>示例1</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">-----</span><br><span class="line">abc</span><br><span class="line">123456789</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">-----</span><br><span class="line">abc00000</span><br><span class="line">12345678</span><br><span class="line">90000000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        str1 = input()</span><br><span class="line">        if str1:</span><br><span class="line">            length1 = len(str1)</span><br><span class="line">            if (length1 % 8) == 0:</span><br><span class="line">                for i in range(0, length1, 8):</span><br><span class="line">                    print(str1[i:i + 8])</span><br><span class="line">            else:</span><br><span class="line">                length1_ = (length1 // 8) * 8 + 8</span><br><span class="line">                for i in range(length1, length1_):</span><br><span class="line">                    str1 += &apos;0&apos;</span><br><span class="line">                for i in range(0, length1_, 8):</span><br><span class="line">                    print(str1[i:i + 8])</span><br><span class="line">        else:</span><br><span class="line">            print(str1)</span><br><span class="line">            </span><br><span class="line">        str2 = input()</span><br><span class="line">        if str2:</span><br><span class="line">            length2 = len(str2)</span><br><span class="line">            if (length2 % 8) == 0:</span><br><span class="line">                for i in range(0, length2, 8):</span><br><span class="line">                    print(str2[i:i + 8])</span><br><span class="line">            else:</span><br><span class="line">                length2_ = (length2 // 8) * 8 + 8</span><br><span class="line">                for i in range(length2, length2_):</span><br><span class="line">                    str2 += &apos;0&apos;</span><br><span class="line">                for i in range(0, length2_, 8):</span><br><span class="line">                    print(str2[i:i + 8])</span><br><span class="line">        else:</span><br><span class="line">            print(str2)</span><br><span class="line"></span><br><span class="line">    except:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h1 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h1><blockquote><p><code>题目描述</code>写出一个程序，接受一个十六进制的数值字符串，输出该数值的十进制字符串。（多组同时输入 ）</p></blockquote><blockquote><p><code>输入描述</code>输入一个十六进制的数值字符串。</p></blockquote><blockquote><p><code>输出描述</code>输出该数值的十进制字符串。</p></blockquote><blockquote><p><code>示例1</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">-----</span><br><span class="line">0xA</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">-----</span><br><span class="line">10</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        Hex = input()</span><br><span class="line">        print(int(Hex, 16))</span><br><span class="line">    except:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h1 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h1><blockquote><p><code>题目描述</code>功能:输入一个正整数，按照从小到大的顺序输出它的所有质数的因子（如180的质数因子为2 2 3 3 5 ）最后一个数后面也要有空格</p></blockquote><blockquote><p><code>详细描述</code><br>函数接口说明：<br>public String getResult(long ulDataInput)<br>输入参数：<br>long ulDataInput：输入的正整数<br>返回值：<br>String</p></blockquote><blockquote><p><code>输入描述</code>输入一个long型整数</p></blockquote><blockquote><p><code>输出描述</code>按照从小到大的顺序输出它的所有质数的因子，以空格隔开。最后一个数后面也要有空格。</p></blockquote><blockquote><p><code>示例1</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">-----</span><br><span class="line">180</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">-----</span><br><span class="line">2 2 3 3 5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        num = int(input())</span><br><span class="line">        while num &gt; 1:</span><br><span class="line">            i = 2</span><br><span class="line">            while True:</span><br><span class="line">                if num % i == 0:</span><br><span class="line">                    print(i, end=&apos; &apos;)</span><br><span class="line">                    num /= i</span><br><span class="line">                    break</span><br><span class="line">                i += 1</span><br><span class="line">    except:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h1 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h1><blockquote><p><code>题目描述</code>写出一个程序，接受一个正浮点数值，输出该数值的近似整数值。如果小数点后数值大于等于5,向上取整；小于5，则向下取整。</p></blockquote><blockquote><p><code>输入描述</code>输入一个正浮点数值</p></blockquote><blockquote><p><code>输出描述</code>输出该数值的近似整数值</p></blockquote><blockquote><p><code>示例1</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">-----</span><br><span class="line">5.5</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">-----</span><br><span class="line">6</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        num = input()</span><br><span class="line">        index = num.index(&apos;.&apos;)</span><br><span class="line">        if int(num[index+1]) &gt;= 5:</span><br><span class="line">            print(int(num[: index])+1)</span><br><span class="line">        else:</span><br><span class="line">            print(int(num[: index]))</span><br><span class="line">    except:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h1 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h1><blockquote><p><code>题目描述</code>数据表记录包含表索引和数值，请对表索引相同的记录进行合并，即将相同索引的数值进行求和运算，输出按照key值升序进行输出。</p></blockquote><blockquote><p><code>输入描述</code>先输入键值对的个数<br>然后输入成对的index和value值，以空格隔开</p></blockquote><blockquote><p><code>输出描述</code>输出合并后的键值对（多行）</p></blockquote><blockquote><p><code>示例1</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">-----</span><br><span class="line">4</span><br><span class="line">0 1</span><br><span class="line">0 2</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">----</span><br><span class="line">0 3</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        num = int(input())</span><br><span class="line">        output = &#123;&#125;</span><br><span class="line">        for i in range(num):</span><br><span class="line">            pair = input().split(&apos; &apos;)</span><br><span class="line">            output[int(pair[0])] = output.setdefault(int(pair[0]), 0) + int(pair[1])</span><br><span class="line">        output_list = sorted(output.keys())</span><br><span class="line">        for i in output_list:</span><br><span class="line">            print(i, output[i])</span><br><span class="line">    except:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h1 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h1><blockquote><p><code>题目描述</code>输入一个int型整数，按照从右向左的阅读顺序，返回一个不含重复数字的新的整数。</p></blockquote><blockquote><p><code>输入描述</code>输入一个int型整数</p></blockquote><blockquote><p><code>输出描述</code>按照从右向左的阅读顺序，返回一个不含重复数字的新的整数</p></blockquote><blockquote><p><code>示例1</code></p></blockquote><p>输入：9876673</p><p>输出：37689</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num = input()</span><br><span class="line">        length = len(num)</span><br><span class="line">        output = num[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> num[i] <span class="keyword">not</span> <span class="keyword">in</span> num[i+<span class="number">1</span>:]:</span><br><span class="line">                output += num[i]</span><br><span class="line">        print(output)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h1><blockquote><p><code>题目描述</code>输入一个整数，将这个整数以字符串的形式逆序输出</p></blockquote><p>程序不考虑负数的情况，若数字含有0，则逆序形式也含有0，如输入为100，则输出为001</p><blockquote><p><code>输入描述</code>输入一个int整数</p></blockquote><blockquote><p><code>输出描述</code>将这个整数以字符串的形式逆序输出</p></blockquote><blockquote><p><code>示例1</code></p></blockquote><p>输入：1516000</p><p>输出：0006151</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(input()[::<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="第十一题"><a href="#第十一题" class="headerlink" title="第十一题"></a>第十一题</h1><blockquote><p><code>题目描述</code>写出一个程序，接受一个字符串，然后输出该字符串反转后的字符串。</p></blockquote><blockquote><p><code>输入描述</code>输入N个字符</p></blockquote><blockquote><p><code>输出描述</code>输出该字符串反转后的字符串</p></blockquote><blockquote><p><code>示例1</code></p></blockquote><p>输入：abcd</p><p>输出：dcba</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(input()[::<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="第十二题"><a href="#第十二题" class="headerlink" title="第十二题"></a>第十二题</h1><blockquote><p><code>题目描述</code>将一个英文语句以单词为单位逆序排放。例如“I am a boy”，逆序排放后为“boy a am I”，所有单词之间用一个空格隔开，语句中除了英文字母外，不再包含其他字符</p></blockquote><blockquote><p><code>输入描述</code>将一个英文语句以单词为单位逆序排放。</p></blockquote><blockquote><p><code>输出描述</code>得到逆序的句子</p></blockquote><blockquote><p><code>示例1</code></p></blockquote><p>输入：I am a boy</p><p>输出：boy a am I</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sen = input().split(<span class="string">' '</span>)</span><br><span class="line">        s = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> index, word <span class="keyword">in</span> enumerate(sen[:: <span class="number">-1</span>]):</span><br><span class="line">            <span class="keyword">if</span> index == (len(sen) <span class="number">-1</span>):</span><br><span class="line">                s += word</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s = s + word + <span class="string">' '</span></span><br><span class="line">        print(s)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="第十三题-字串的连接最长路径查找"><a href="#第十三题-字串的连接最长路径查找" class="headerlink" title="第十三题 字串的连接最长路径查找"></a>第十三题 字串的连接最长路径查找</h1><blockquote><p><code>题目描述</code>给定n个字符串，请对n个字符串按照字典序排列。</p></blockquote><blockquote><p><code>输入描述</code>输入第一行为一个正整数n(1≤n≤1000),下面n行为n个字符串(字符串长度≤100),字符串中只含有大小写字母。</p></blockquote><blockquote><p><code>输出描述</code>数据输出n行，输出结果为按照字典序排列的字符串。</p></blockquote><blockquote><p><code>示例1</code></p></blockquote><p>输入：</p><pre><code>9captocatcardtwotooupboatboot</code></pre><p>输出：</p><pre><code>boatbootcapcardcattotootwoup</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        num = int(input())</span><br><span class="line">        strings = []</span><br><span class="line">        for i in range(num):</span><br><span class="line">            strings.append(input())</span><br><span class="line">        strings.sort()</span><br><span class="line">        for i in strings:</span><br><span class="line">            print(i)</span><br><span class="line">    except:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h1 id="第十四题-求int型正整数在内存中存储时1的个数"><a href="#第十四题-求int型正整数在内存中存储时1的个数" class="headerlink" title="第十四题 求int型正整数在内存中存储时1的个数"></a>第十四题 求int型正整数在内存中存储时1的个数</h1><blockquote><p><code>题目描述</code>输入一个int型的正整数，计算出该int型数据在内存中存储时1的个数。</p></blockquote><blockquote><p><code>输入描述</code>输入一个整数（int类型）</p></blockquote><blockquote><p><code>输出描述</code>这个数转换成2进制后，输出1的个数</p></blockquote><blockquote><p><code>示例1</code></p></blockquote><p>输入：</p><pre><code>5</code></pre><p>输出：</p><pre><code>2</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        num = int(input())</span><br><span class="line">        count = 0</span><br><span class="line">        for i in bin(num):</span><br><span class="line">            if i == &apos;1&apos;:</span><br><span class="line">                count += 1</span><br><span class="line">        print(count)</span><br><span class="line">    except:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h1 id="第十五题-购物单"><a href="#第十五题-购物单" class="headerlink" title="第十五题 购物单"></a>第十五题 购物单</h1><blockquote><p><code>题目描述</code>王强今天很开心，公司发给N元的年终奖。王强决定把年终奖用于购物，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子：</p></blockquote><pre><code>主件    附件电脑    打印机，扫描仪书柜    图书书桌    台灯，文具工作椅    无</code></pre><p>如果要买归类为附件的物品，必须先买该附件所属的主件。每个主件可以有 0 个、 1 个或 2 个附件。附件不再有从属于自己的附件。王强想买的东西很多，为了不超出预算，他把每件物品规定了一个重要度，分为 5 等：用整数 1 ~ 5 表示，第 5 等最重要。他还从因特网上查到了每件物品的价格（都是 10 元的整数倍）。他希望在不超过 N 元（可以等于 N 元）的前提下，使每件物品的价格与重要度的乘积的总和最大。</p><p>设第 j 件物品的价格为 v[j] ，重要度为 w[j] ，共选中了 k 件物品，编号依次为 j 1 ， j 2 ，……， j k ，则所求的总和为：<br>v[j 1 ]<em>w[j 1 ]+v[j 2 ]</em>w[j 2 ]+ … +v[j k ]<em>w[j k ] 。（其中 </em> 为乘号）</p><p>请你帮助王强设计一个满足要求的购物单。</p><blockquote><p><code>输入描述</code>输入的第 1 行，为两个正整数，用一个空格隔开：N m</p></blockquote><p>（其中 N （ &lt;32000 ）表示总钱数， m （ &lt;60 ）为希望购买物品的个数。）</p><p>从第 2 行到第 m+1 行，第 j 行给出了编号为 j-1 的物品的基本数据，每行有 3 个非负整数 v p q</p><p>（其中 v 表示该物品的价格（ v<10000 1="" 5="" ），="" p="" 表示该物品的重要度（="" ~="" q="" 表示该物品是主件还是附件。如果="" ，表示该物品为主件，如果="">0 ，表示该物品为附件， q 是所属主件的编号）</10000></p><blockquote><p><code>输出描述</code>输出文件只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（ &lt;200000 ）。</p></blockquote><blockquote><p><code>示例1</code></p></blockquote><p>输入：</p><pre><code>1000 5800 2 0400 5 1300 5 1400 3 0500 2 0</code></pre><p>输出：</p><pre><code>2200</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        N, m = map(int, input().strip().split())</span><br><span class="line">        goods = []</span><br><span class="line">        for i in range(m):</span><br><span class="line">            goods.append(list(map(int, input().strip().split())))</span><br><span class="line">        def dp_max(N, m, goods):</span><br><span class="line">            a = [[0]*(N+1) for _ in range(m+1)]</span><br><span class="line">            for i in range(1, m+1):</span><br><span class="line">                for j in range(10, N+1, 10):</span><br><span class="line">                    if goods[i-1][2] == 0:</span><br><span class="line">                        if goods[i-1][0] &lt;= j:</span><br><span class="line">                            a[i][j] = max(a[i-1][j], a[i-1][j - goods[i-1][0]] + goods[i-1][0]*goods[i-1][1])</span><br><span class="line">                    elif (goods[i-1][0] + goods[goods[i-1][2]-1][0]) &lt;= j:</span><br><span class="line">                        a[i][j] = max(a[i-1][j], a[i-1][j - goods[i-1][0] - goods[goods[i-1][2]-1][0]] + goods[i-1][0] * goods[i-1][1] + goods[goods[i-1][2]-1][0] * goods[goods[i-1][2]-1][1])</span><br><span class="line">            print(a[m][int(N / 10) * 10])</span><br><span class="line">        dp_max(N, m, goods)</span><br><span class="line">    except:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h1 id="第十六题-坐标移动"><a href="#第十六题-坐标移动" class="headerlink" title="第十六题 坐标移动"></a>第十六题 坐标移动</h1><blockquote><p><code>题目描述</code>开发一个坐标计算工具， A表示向左移动，D表示向右移动，W表示向上移动，S表示向下移动。从（0,0）点开始移动，从输入字符串里面读取一些坐标，并将最终输入结果输出到输出文件里面。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">合法坐标为A(或者D或者W或者S) + 数字（两位以内）</span><br><span class="line">坐标之间以;分隔。</span><br><span class="line">非法坐标点需要进行丢弃。如AA10;  A1A;  $%$;  YAD; 等。</span><br><span class="line">下面是一个简单的例子 如：</span><br><span class="line">A10;S20;W10;D30;X;A1A;B10A11;;A10;</span><br><span class="line">处理过程：</span><br><span class="line">起点（0,0）</span><br><span class="line">+   A10   =  （-10,0）</span><br><span class="line">+   S20   =  (-10,-20)</span><br><span class="line">+   W10  =  (-10,-10)</span><br><span class="line">+   D30  =  (20,-10)</span><br><span class="line">+   x    =  无效</span><br><span class="line">+   A1A   =  无效</span><br><span class="line">+   B10A11   =  无效</span><br><span class="line">+  一个空 不影响</span><br><span class="line">+   A10  =  (10,-10)</span><br><span class="line">结果 （10， -10）</span><br></pre></td></tr></table></figure><blockquote><p><code>输入描述</code>一行字符串</p></blockquote><blockquote><p><code>输出描述</code>最终坐标，以,分隔</p></blockquote><blockquote><p><code>示例1</code></p></blockquote><p>输入：A10;S20;W10;D30;X;A1A;B10A11;;A10;</p><p>输出：10,-10</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    text = line.strip().split(&apos;;&apos;)</span><br><span class="line">    x = 0</span><br><span class="line">    y = 0</span><br><span class="line">    actions = []</span><br><span class="line">    for el in text:</span><br><span class="line">        if re.match(&apos;^[AWDS]\d$&apos;, el) or re.match(&apos;^[AWDS]\d\d$&apos;, el):</span><br><span class="line">            actions.append(el)</span><br><span class="line">    for el in actions:</span><br><span class="line">        if el[0] == &apos;A&apos;:</span><br><span class="line">            x -= int(el[1:])</span><br><span class="line">        if el[0] == &apos;D&apos;:</span><br><span class="line">            x += int(el[1:])</span><br><span class="line">        if el[0] == &apos;W&apos;:</span><br><span class="line">            y += int(el[1:])</span><br><span class="line">        if el[0] == &apos;S&apos;:</span><br><span class="line">            y -= int(el[1:])</span><br><span class="line">    print(&apos;%d,%d&apos; % (x, y))</span><br></pre></td></tr></table></figure><h1 id="第十七题-识别有效的IP地址和掩码并进行分类统计"><a href="#第十七题-识别有效的IP地址和掩码并进行分类统计" class="headerlink" title="第十七题 识别有效的IP地址和掩码并进行分类统计"></a>第十七题 识别有效的IP地址和掩码并进行分类统计</h1><blockquote><p><code>题目描述</code>请解析IP地址和对应的掩码，进行分类识别。要求按照A/B/C/D/E类地址归类，不合法的地址和掩码单独归类。</p></blockquote><p>所有的IP地址划分为 A,B,C,D,E五类</p><p>A类地址1.0.0.0~126.255.255.255;</p><p>B类地址128.0.0.0~191.255.255.255;</p><p>C类地址192.0.0.0~223.255.255.255;</p><p>D类地址224.0.0.0~239.255.255.255；</p><p>E类地址240.0.0.0~255.255.255.255</p><p>私网IP范围是：</p><p>10.0.0.0～10.255.255.255</p><p>172.16.0.0～172.31.255.255</p><p>192.168.0.0～192.168.255.255</p><p>子网掩码为前面是连续的1，然后全是0。（例如：255.255.255.32就是一个非法的掩码）<br>本题暂时默认以0开头的IP地址是合法的，比如0.1.1.2，是合法地址</p><blockquote><p><code>输入描述</code>多行字符串。每行一个IP地址和掩码，用~隔开。</p></blockquote><blockquote><p><code>输出描述</code>统计A、B、C、D、E、错误IP地址或错误掩码、私有IP的个数，之间以空格隔开。</p></blockquote><blockquote><p><code>示例1</code></p></blockquote><p>输入：<br>    0.70.44.68~255.254.255.0<br>    1.0.0.1~255.0.0.0<br>    192.168.0.2~255.255.255.0<br>    19..0.~255.255.255.0</p><p>输出：1 0 1 0 0 2 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">A = <span class="number">0</span></span><br><span class="line">B = <span class="number">0</span></span><br><span class="line">C = <span class="number">0</span></span><br><span class="line">D = <span class="number">0</span></span><br><span class="line">E = <span class="number">0</span></span><br><span class="line">err = <span class="number">0</span></span><br><span class="line">pri = <span class="number">0</span></span><br><span class="line">legal = [<span class="string">'254'</span>, <span class="string">'252'</span>, <span class="string">'248'</span>, <span class="string">'240'</span>, <span class="string">'224'</span>, <span class="string">'192'</span>, <span class="string">'128'</span>, <span class="string">'0'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_ip</span><span class="params">(ip)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (len(ip) != <span class="number">4</span>) <span class="keyword">or</span> (<span class="string">''</span> <span class="keyword">in</span> ip):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ip:</span><br><span class="line">            <span class="keyword">if</span> (int(ip[<span class="number">0</span>]) &lt; <span class="number">0</span>) <span class="keyword">or</span> (int(ip[<span class="number">0</span>]) &gt; <span class="number">255</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_mask</span><span class="params">(ms)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (len(ms) != <span class="number">4</span>) <span class="keyword">or</span> (<span class="string">''</span> <span class="keyword">in</span> ms):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">if</span> ms[<span class="number">0</span>] == <span class="string">'255'</span>:</span><br><span class="line">        <span class="keyword">if</span> ms[<span class="number">1</span>] == <span class="string">'255'</span>:</span><br><span class="line">            <span class="keyword">if</span> ms[<span class="number">2</span>] == <span class="string">'255'</span>:</span><br><span class="line">                <span class="keyword">if</span> ms[<span class="number">3</span>] <span class="keyword">in</span> legal:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">elif</span> (ms[<span class="number">2</span>] <span class="keyword">in</span> legal) <span class="keyword">and</span> (ms[<span class="number">3</span>] == <span class="string">'0'</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">elif</span> (ms[<span class="number">1</span>] <span class="keyword">in</span> legal) <span class="keyword">and</span> (ms[<span class="number">2</span>] == <span class="string">'0'</span>) <span class="keyword">and</span> (ms[<span class="number">3</span>] == <span class="string">'0'</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">elif</span> (ms[<span class="number">0</span>] <span class="keyword">in</span> legal) <span class="keyword">and</span> (ms[<span class="number">1</span>] == <span class="string">'0'</span>) <span class="keyword">and</span> (ms[<span class="number">2</span>] == <span class="string">'0'</span>) <span class="keyword">and</span> (ms[<span class="number">3</span>] == <span class="string">'0'</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    elements = line.strip().split(<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> el <span class="keyword">in</span> elements:</span><br><span class="line">        ip = el.split(<span class="string">'~'</span>)[<span class="number">0</span>].split(<span class="string">'.'</span>)</span><br><span class="line">        ms = el.split(<span class="string">'~'</span>)[<span class="number">1</span>].split(<span class="string">'.'</span>)</span><br><span class="line">        <span class="keyword">if</span> check_ip(ip) <span class="keyword">and</span> check_mask(ms):</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> &lt;= int(ip[<span class="number">0</span>])) <span class="keyword">and</span> (int(ip[<span class="number">0</span>]) &lt;= <span class="number">126</span>):</span><br><span class="line">                A += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">128</span> &lt;= int(ip[<span class="number">0</span>])) <span class="keyword">and</span> (int(ip[<span class="number">0</span>]) &lt;= <span class="number">191</span>):</span><br><span class="line">                B += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">192</span> &lt;= int(ip[<span class="number">0</span>])) <span class="keyword">and</span> (int(ip[<span class="number">0</span>]) &lt;= <span class="number">223</span>):</span><br><span class="line">                C += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">224</span> &lt;= int(ip[<span class="number">0</span>])) <span class="keyword">and</span> (int(ip[<span class="number">0</span>]) &lt;= <span class="number">239</span>):</span><br><span class="line">                D += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">240</span> &lt;= int(ip[<span class="number">0</span>])) <span class="keyword">and</span> (int(ip[<span class="number">0</span>]) &lt;= <span class="number">255</span>):</span><br><span class="line">                E += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (int(ip[<span class="number">0</span>]) == <span class="number">10</span>) <span class="keyword">or</span> ((int(ip[<span class="number">0</span>]) == <span class="number">172</span>) <span class="keyword">and</span> (<span class="number">16</span> &lt;= int(ip[<span class="number">1</span>])) <span class="keyword">and</span> (int(ip[<span class="number">1</span>]) &lt;= <span class="number">31</span>)) <span class="keyword">or</span> ((int(ip[<span class="number">0</span>]) == <span class="number">192</span>) <span class="keyword">and</span> (int(ip[<span class="number">1</span>]) == <span class="number">168</span>)):</span><br><span class="line">                pri += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            err += <span class="number">1</span></span><br><span class="line">print(<span class="string">'%d %d %d %d %d %d %d'</span> % (A, B, C, D, E, err, pri))</span><br></pre></td></tr></table></figure><h1 id="第十八题-简单错误记录"><a href="#第十八题-简单错误记录" class="headerlink" title="第十八题 简单错误记录"></a>第十八题 简单错误记录</h1><blockquote><p><code>题目描述</code>开发一个简单错误记录功能小模块，能够记录出错的代码所在的文件名称和行号。</p></blockquote><p>处理: </p><p>1、 记录最多8条错误记录，循环记录，对相同的错误记录（净文件名称和行号完全匹配）只记录一条，错误计数增加；</p><p>2、 超过16个字符的文件名称，只记录文件的最后有效16个字符；</p><p>3、 输入的文件可能带路径，记录文件名称不能带路径。</p><blockquote><p><code>输入描述</code>一行或多行字符串。每行包括带路径文件名称，行号，以空格隔开。</p></blockquote><blockquote><p><code>输出描述</code>将所有的记录统计并将结果输出，格式：文件名 代码行数 数目，一个空格隔开，如：</p></blockquote><blockquote><p><code>示例1</code></p></blockquote><p>输入：E:\V1R2\product\fpgadrive.c   1325</p><p>输出：fpgadrive.c 1325 1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">records = []</span><br><span class="line">count = &#123;&#125;</span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    record, num = line.strip().split()</span><br><span class="line">    if &apos;\\&apos; in record:</span><br><span class="line">        record = record.split(&apos;\\&apos;)[-1][-16:]</span><br><span class="line">    else:</span><br><span class="line">        record = record[-16:]</span><br><span class="line">    record = record + &apos; &apos; + num</span><br><span class="line">    if record not in records:</span><br><span class="line">        records.append(record)</span><br><span class="line">        count[record] = 1</span><br><span class="line">    else:</span><br><span class="line">        count[record] += 1</span><br><span class="line">for record in records[-8:]:</span><br><span class="line">    print(&apos;%s %d&apos; % (record, count[record]))</span><br></pre></td></tr></table></figure><h1 id="第十九题-密码验证合格程序"><a href="#第十九题-密码验证合格程序" class="headerlink" title="第十九题 密码验证合格程序"></a>第十九题 密码验证合格程序</h1><blockquote><p><code>题目描述</code>密码要求:</p></blockquote><p>1.长度超过8位</p><p>2.包括大小写字母.数字.其它符号,以上四种至少三种</p><p>3.不能有相同长度超2的子串重复</p><p>说明:长度超过2的子串</p><blockquote><p><code>输入描述</code>一组或多组长度超过2的子符串。每组占一行</p></blockquote><blockquote><p><code>输出描述</code>如果符合要求输出：OK，否则输出NG</p></blockquote><blockquote><p><code>示例1</code></p></blockquote><p>输入:</p><pre><code>021Abc9000021Abc9Abc1021ABC9000021$bc9000</code></pre><p>输出：</p><pre><code>OKNGNGOK</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check1</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(s) &gt; <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check2</span><span class="params">(s)</span>:</span></span><br><span class="line">    k1 = <span class="number">0</span></span><br><span class="line">    k2 = <span class="number">0</span></span><br><span class="line">    k3 = <span class="number">0</span></span><br><span class="line">    k4 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> el <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'A'</span> &lt;= el &lt;= <span class="string">'Z'</span>:</span><br><span class="line">            k1 = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'a'</span> &lt;= el &lt;= <span class="string">'z'</span>:</span><br><span class="line">            k2 = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'0'</span> &lt;= el &lt;= <span class="string">'9'</span>:</span><br><span class="line">            k3 = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k4 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (k1 + k2 + k3 + k4) &gt;= <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check3</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s) - <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> s[i:i+<span class="number">3</span>] <span class="keyword">in</span> s[i+<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    code = line.strip(<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">if</span> check1(code) <span class="keyword">and</span> check2(code) <span class="keyword">and</span> check3(code):</span><br><span class="line">        print(<span class="string">'OK'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'NG'</span>)</span><br></pre></td></tr></table></figure><h1 id="第二十题"><a href="#第二十题" class="headerlink" title="第二十题"></a>第二十题</h1><blockquote><p><code>题目描述</code></p></blockquote><blockquote><p><code>输入描述</code></p></blockquote><blockquote><p><code>输出描述</code></p></blockquote><blockquote><p><code>示例1</code></p></blockquote><h1 id="第二十一题"><a href="#第二十一题" class="headerlink" title="第二十一题"></a>第二十一题</h1><blockquote><p><code>题目描述</code></p></blockquote><blockquote><p><code>输入描述</code></p></blockquote><blockquote><p><code>输出描述</code></p></blockquote><blockquote><p><code>示例1</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一题&quot;&gt;&lt;a href=&quot;#第一题&quot; class=&quot;headerlink&quot; title=&quot;第一题&quot;&gt;&lt;/a&gt;第一题&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;题目描述&lt;/code&gt;计算字符串最后一个单词的长度，单词以空格隔开。&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
      <category term="Python基础" scheme="https://blog.luoyanbin.cn/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python" scheme="https://blog.luoyanbin.cn/tags/Python/"/>
    
      <category term="笔试" scheme="https://blog.luoyanbin.cn/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda安装Tensorflow框架</title>
    <link href="https://blog.luoyanbin.cn/2018/06/27/install-tensorflow-in-Anaconda/"/>
    <id>https://blog.luoyanbin.cn/2018/06/27/install-tensorflow-in-Anaconda/</id>
    <published>2018-06-27T03:05:00.000Z</published>
    <updated>2018-11-22T12:00:11.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-conda清华源"><a href="#1-conda清华源" class="headerlink" title="1. conda清华源"></a>1. conda清华源</h1><p>打开cmd，输入以下两条命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><h1 id="2-安装Tensorflow"><a href="#2-安装Tensorflow" class="headerlink" title="2. 安装Tensorflow"></a>2. 安装Tensorflow</h1><h2 id="2-1-创建名为tensorflow的虚拟环境"><a href="#2-1-创建名为tensorflow的虚拟环境" class="headerlink" title="2.1 创建名为tensorflow的虚拟环境"></a>2.1 创建名为tensorflow的虚拟环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Python 3.6</span><br><span class="line">conda create -n tensorflow python=3.6</span><br></pre></td></tr></table></figure><h2 id="2-2-激活tensorflow虚拟环境"><a href="#2-2-激活tensorflow虚拟环境" class="headerlink" title="2.2 激活tensorflow虚拟环境"></a>2.2 激活tensorflow虚拟环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate tensorflow</span><br></pre></td></tr></table></figure><h2 id="2-3-安装tensorflow框架"><a href="#2-3-安装tensorflow框架" class="headerlink" title="2.3 安装tensorflow框架"></a>2.3 安装tensorflow框架</h2><ul><li>安装指令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install tensorflow</span><br></pre></td></tr></table></figure><ul><li>安装结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">(tensorflow) F:\&gt;conda install tensorflow</span><br><span class="line">Solving environment: done</span><br><span class="line"></span><br><span class="line">## Package Plan ##</span><br><span class="line"></span><br><span class="line">  environment location: D:\Users\Administrator\Anaconda3\envs\tensorflow</span><br><span class="line"></span><br><span class="line">  added / updated specs:</span><br><span class="line">    - tensorflow</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The following packages will be downloaded:</span><br><span class="line"></span><br><span class="line">    package                    |            build</span><br><span class="line">    ---------------------------|-----------------</span><br><span class="line">    tensorflow-1.2.1           |           py36_0        21.0 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    libprotobuf-3.2.0          |           vc14_0         9.1 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    bleach-1.5.0               |           py36_0          22 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    html5lib-0.9999999         |           py36_0         178 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    backports-1.0              |           py36_0           3 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    werkzeug-0.12.2            |           py36_0         435 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    protobuf-3.2.0             |           py36_0         459 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    zlib-1.2.11                |           vc14_0         119 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    markdown-2.6.9             |           py36_0         100 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    mkl-2017.0.3               |                0       126.3 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    backports.weakref-1.0rc1   |           py36_0           8 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    numpy-1.13.1               |           py36_0         3.6 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    six-1.10.0                 |           py36_0          20 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    ------------------------------------------------------------</span><br><span class="line">                                           Total:       161.4 MB</span><br><span class="line"></span><br><span class="line">The following NEW packages will be INSTALLED:</span><br><span class="line"></span><br><span class="line">    backports:         1.0-py36_0       https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    backports.weakref: 1.0rc1-py36_0    https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    bleach:            1.5.0-py36_0     https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    html5lib:          0.9999999-py36_0 https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    libprotobuf:       3.2.0-vc14_0     https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    markdown:          2.6.9-py36_0     https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    mkl:               2017.0.3-0       https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    numpy:             1.13.1-py36_0    https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    protobuf:          3.2.0-py36_0     https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    six:               1.10.0-py36_0    https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    tensorflow:        1.2.1-py36_0     https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    werkzeug:          0.12.2-py36_0    https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">    zlib:              1.2.11-vc14_0    https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line"></span><br><span class="line">Proceed ([y]/n)? y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading and Extracting Packages</span><br><span class="line">tensorflow-1.2.1     | 21.0 MB | ############################################################################################################### | 100%</span><br><span class="line">libprotobuf-3.2.0    |  9.1 MB | ############################################################################################################### | 100%</span><br><span class="line">bleach-1.5.0         |   22 KB | ############################################################################################################### | 100%</span><br><span class="line">html5lib-0.9999999   |  178 KB | ############################################################################################################### | 100%</span><br><span class="line">backports-1.0        |    3 KB | ############################################################################################################### | 100%</span><br><span class="line">werkzeug-0.12.2      |  435 KB | ############################################################################################################### | 100%</span><br><span class="line">protobuf-3.2.0       |  459 KB | ############################################################################################################### | 100%</span><br><span class="line">zlib-1.2.11          |  119 KB | ############################################################################################################### | 100%</span><br><span class="line">markdown-2.6.9       |  100 KB | ############################################################################################################### | 100%</span><br><span class="line">mkl-2017.0.3         | 126.3 MB | ############################################################################################################## | 100%</span><br><span class="line">backports.weakref-1. |    8 KB | ############################################################################################################### | 100%</span><br><span class="line">numpy-1.13.1         |  3.6 MB | ############################################################################################################### | 100%</span><br><span class="line">six-1.10.0           |   20 KB | ############################################################################################################### | 100%</span><br><span class="line">Preparing transaction: done</span><br><span class="line">Verifying transaction: done</span><br><span class="line">Executing transaction: done</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-conda清华源&quot;&gt;&lt;a href=&quot;#1-conda清华源&quot; class=&quot;headerlink&quot; title=&quot;1. conda清华源&quot;&gt;&lt;/a&gt;1. conda清华源&lt;/h1&gt;&lt;p&gt;打开cmd，输入以下两条命令&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="Python基础" scheme="https://blog.luoyanbin.cn/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Tensorflow" scheme="https://blog.luoyanbin.cn/tags/Tensorflow/"/>
    
      <category term="Anaconda" scheme="https://blog.luoyanbin.cn/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>皮尔森相关系数及其Seaborn可视化</title>
    <link href="https://blog.luoyanbin.cn/2018/06/07/Pearson-Correlation-Coefficient-and-Visualized-by-Seaborn/"/>
    <id>https://blog.luoyanbin.cn/2018/06/07/Pearson-Correlation-Coefficient-and-Visualized-by-Seaborn/</id>
    <published>2018-06-07T01:56:12.000Z</published>
    <updated>2018-11-22T12:00:11.593Z</updated>
    
    <content type="html"><![CDATA[<p>在统计学中，<a href="https://en.wikipedia.org/wiki/Pearson_correlation_coefficient" target="_blank" rel="noopener">Pearson Correlation Coefficient</a>(PCC)是对两个变量X和Y之间线性关系的量测。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><ul><li>公式1</li></ul><p>如果存在一个数据集{$x_1,x_2,…,x_n$}和另一个数据集{$y_1,y_2,…,y_n$}，这两个数据集都有n个变量，那么皮尔森相关系数为</p><p>$$r=\frac{\sum_{i=1}^{n} (x_i-\widetilde{x})(y_i-\widetilde{y})}{\sqrt{\sum_{i=1}^{n} (x_i-\widetilde{x})^2 } \sqrt{\sum_{i=1}^{n}(y_i-\widetilde{y})^2}}$$</p><p>式中：n为样本规模；$\widetilde{x}=\frac{1}{n}\sum_{i=1}^{n}x_i$为样本均值，$\widetilde{y}$同理。</p><h1 id="Seaborn可视化"><a href="#Seaborn可视化" class="headerlink" title="Seaborn可视化"></a>Seaborn可视化</h1><h2 id="皮尔森相关系数热图"><a href="#皮尔森相关系数热图" class="headerlink" title="皮尔森相关系数热图"></a>皮尔森相关系数热图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">colormap = plt.cm.RdBu</span><br><span class="line">plt.figure(figsize=(14, 12))</span><br><span class="line">plt.title(&apos;Pearson Correlation of Features&apos;, y=1.05, size=15)</span><br><span class="line">sns.heatmap(train.astype(float).corr(),linewidths=0.1,vmax=1.0, </span><br><span class="line">            square=True, cmap=colormap, linecolor=&apos;white&apos;, annot=True)</span><br></pre></td></tr></table></figure><p><img src="http://wx1.sinaimg.cn/mw690/715e29a9gy1fs2en6z8y5j23ew2xc4qp.jpg" alt=""></p><h3 id="pandas-DataFrame-corr"><a href="#pandas-DataFrame-corr" class="headerlink" title="pandas.DataFrame.corr"></a>pandas.DataFrame.corr</h3><pre><code>DataFrame.corr(method=&apos;pearson&apos;, min_periods=1)计算列之间的成对相关性，不包含NA/null值Parameters:    method:{&apos;pearson&apos;, &apos;kendall&apos;, &apos;spearman&apos;}        - pearson : standard correlation coefficient        - kendall : Kendall Tau correlation coefficient        - spearman : Spearman rank correlation    min_periods : int, optional        Minimum number of observations required per pair of columns to have a     valid result. Currently only available for pearson and spearman correlationReturns:    y:DataFrame</code></pre><h3 id="seaborn-heatmap"><a href="#seaborn-heatmap" class="headerlink" title="seaborn.heatmap"></a>seaborn.heatmap</h3><pre><code>seaborn.heatmap(data, vmin=None, vmax=None, cmap=None, center=None, robust=False, annot=None, fmt=&apos;.2g&apos;, annot_kws=None, linewidths=0, linecolor=&apos;white&apos;, cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels=&apos;auto&apos;, yticklabels=&apos;auto&apos;, mask=None, ax=None, **kwargs)将矩形数据绘制为颜色编码矩阵Parameters：    data : rectangular dataset        2D dataset that can be coerced into an ndarray. If a Pandas DataFrame is provided, the index/column information will be used to label the columns and rows.    vmin, vmax : floats, optional        Values to anchor the colormap, otherwise they are inferred from the data and other keyword arguments.    cmap : matplotlib colormap name or object, or list of colors, optional        The mapping from data values to color space. If not provided, the default will depend on whether center is set.    center : float, optional        The value at which to center the colormap when plotting divergant data. Using this parameter will change the default cmap if none is specified.    robust : bool, optional        If True and vmin or vmax are absent, the colormap range is computed with robust quantiles instead of the extreme values.    annot : bool or rectangular dataset, optional        If True, write the data value in each cell. If an array-like with the same shape as data, then use this to annotate the heatmap instead of the raw data.    fmt : string, optional        String formatting code to use when adding annotations.    annot_kws : dict of key, value mappings, optional        Keyword arguments for ax.text when annot is True.    linewidths : float, optional        Width of the lines that will divide each cell.    linecolor : color, optional        Color of the lines that will divide each cell.    cbar : boolean, optional        Whether to draw a colorbar.    cbar_kws : dict of key, value mappings, optional        Keyword arguments for fig.colorbar.    cbar_ax : matplotlib Axes, optional        Axes in which to draw the colorbar, otherwise take space from the main Axes.    square : boolean, optional        If True, set the Axes aspect to “equal” so each cell will be square-shaped.    xticklabels, yticklabels : “auto”, bool, list-like, or int, optional        If True, plot the column names of the dataframe. If False, don’t plot the column names. If list-like, plot these alternate labels as the xticklabels. If an integer, use the column names but plot only every n label. If “auto”, try to densely plot non-overlapping labels.    mask : boolean array or DataFrame, optional        If passed, data will not be shown in cells where mask is True. Cells with missing values are automatically masked.    ax : matplotlib Axes, optional        Axes in which to draw the plot, otherwise use the currently-active Axes.    kwargs : other keyword arguments        All other keyword arguments are passed to ax.pcolormesh.Returns:        ax : matplotlib Axes        Axes object with the heatmap</code></pre><h3 id="matplotlib-pyplot-cm-RdBu"><a href="#matplotlib-pyplot-cm-RdBu" class="headerlink" title="matplotlib.pyplot.cm.RdBu"></a>matplotlib.pyplot.cm.RdBu</h3><pre><code>matplotlib.pyplot.cm.RdBuSeaborn.heatmap()中的cmap，热图中的矩形颜色</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在统计学中，&lt;a href=&quot;https://en.wikipedia.org/wiki/Pearson_correlation_coefficient&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pearson Correlation Coeffici
      
    
    </summary>
    
      <category term="数据科学" scheme="https://blog.luoyanbin.cn/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="Pearson Correlation Coefficient" scheme="https://blog.luoyanbin.cn/tags/Pearson-Correlation-Coefficient/"/>
    
      <category term="皮尔森相关系数" scheme="https://blog.luoyanbin.cn/tags/%E7%9A%AE%E5%B0%94%E6%A3%AE%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0/"/>
    
      <category term="Seaborn" scheme="https://blog.luoyanbin.cn/tags/Seaborn/"/>
    
  </entry>
  
  <entry>
    <title>Titanic获救预测数据集预处理</title>
    <link href="https://blog.luoyanbin.cn/2018/06/03/Titanic%E8%8E%B7%E6%95%91%E9%A2%84%E6%B5%8B%E6%95%B0%E6%8D%AE%E9%9B%86%E9%A2%84%E5%A4%84%E7%90%86/"/>
    <id>https://blog.luoyanbin.cn/2018/06/03/Titanic获救预测数据集预处理/</id>
    <published>2018-06-03T13:28:20.000Z</published>
    <updated>2018-11-22T12:00:11.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>我的博客<a href="https://blog.luoyanbin.cn/2018/05/12/Titanic%E8%8E%B7%E6%95%91%E9%A2%84%E6%B5%8B/">Titanic获救预测</a>中对dataset的预处理感觉不是很完善，看了Kaggle上的一些Kernels，重新进行预处理（for 深度学习）…</p><h1 id="特征处理"><a href="#特征处理" class="headerlink" title="特征处理"></a>特征处理</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">train = pd.read_csv(<span class="string">r'E:\Mirror\GitHub\Predict-survival-on-the-Titanic\data\train.csv'</span>)</span><br><span class="line">test = pd.read_csv(<span class="string">r'E:\Mirror\GitHub\Predict-survival-on-the-Titanic\data\test.csv'</span>)</span><br><span class="line">full_data = [train, test]</span><br><span class="line">train.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 12 columns):PassengerId    891 non-null int64Survived       891 non-null int64Pclass         891 non-null int64Name           891 non-null objectSex            891 non-null objectAge            714 non-null float64SibSp          891 non-null int64Parch          891 non-null int64Ticket         891 non-null objectFare           891 non-null float64Cabin          204 non-null objectEmbarked       889 non-null objectdtypes: float64(2), int64(5), object(5)memory usage: 83.6+ KB</code></pre><h2 id="1-Pclass"><a href="#1-Pclass" class="headerlink" title="1. Pclass"></a>1. Pclass</h2><p>票类：经济地位的象征</p><table><thead><tr><th>序号</th><th>票类</th></tr></thead><tbody><tr><td>1</td><td>头等舱</td></tr><tr><td>2</td><td>中等舱</td></tr><tr><td>3</td><td>末等舱</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># One-hot编码</span></span><br><span class="line"><span class="comment"># train</span></span><br><span class="line">train[<span class="string">'P1'</span>] = np.array(train[<span class="string">'Pclass'</span>] == <span class="number">1</span>).astype(np.int32)</span><br><span class="line">train[<span class="string">'P2'</span>] = np.array(train[<span class="string">'Pclass'</span>] == <span class="number">2</span>).astype(np.int32)</span><br><span class="line">train[<span class="string">'P3'</span>] = np.array(train[<span class="string">'Pclass'</span>] == <span class="number">3</span>).astype(np.int32)</span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">test[<span class="string">'P1'</span>] = np.array(test[<span class="string">'Pclass'</span>] == <span class="number">1</span>).astype(np.int32)</span><br><span class="line">test[<span class="string">'P2'</span>] = np.array(test[<span class="string">'Pclass'</span>] == <span class="number">2</span>).astype(np.int32)</span><br><span class="line">test[<span class="string">'P3'</span>] = np.array(test[<span class="string">'Pclass'</span>] == <span class="number">3</span>).astype(np.int32)</span><br><span class="line">print(train.head(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>   PassengerId  Survived  Pclass                     Name   Sex   Age  SibSp  \0            1         0       3  Braund, Mr. Owen Harris  male  22.0      1      Parch     Ticket  Fare Cabin Embarked  P1  P2  P3  0      0  A/5 21171  7.25   NaN        S   0   0   1  </code></pre><h2 id="2-Sex"><a href="#2-Sex" class="headerlink" title="2. Sex"></a>2. Sex</h2><p>性别：男or女</p><table><thead><tr><th>Sex</th><th>label</th></tr></thead><tbody><tr><td>male</td><td>1</td></tr><tr><td>female</td><td>0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把male/female转换成1/0</span></span><br><span class="line">train[<span class="string">'Sex'</span>] = [<span class="number">1</span> <span class="keyword">if</span> i == <span class="string">'male'</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> train.Sex]</span><br><span class="line">test[<span class="string">'Sex'</span>] = [<span class="number">1</span> <span class="keyword">if</span> i == <span class="string">'male'</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> test.Sex]</span><br><span class="line">print(train.head(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>   PassengerId  Survived  Pclass                     Name  Sex   Age  SibSp  \0            1         0       3  Braund, Mr. Owen Harris    1  22.0      1      Parch     Ticket  Fare Cabin Embarked  P1  P2  P3  0      0  A/5 21171  7.25   NaN        S   0   0   1  </code></pre><h2 id="3-SibSp-and-Parch"><a href="#3-SibSp-and-Parch" class="headerlink" title="3. SibSp and Parch"></a>3. SibSp and Parch</h2><ul><li>SibSp</li></ul><p>the number of siblings/spouse：兄弟姐妹/配偶人数</p><ul><li>Parch</li></ul><p>the number of children/parents：子女/父母人数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 'FamilySize'：家庭成员人数</span></span><br><span class="line"><span class="keyword">for</span> dataset <span class="keyword">in</span> full_data:</span><br><span class="line">    dataset[<span class="string">'FamilySize'</span>] = dataset[<span class="string">'SibSp'</span>] + dataset[<span class="string">'Parch'</span>] + <span class="number">1</span></span><br><span class="line">print(train.head(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>   PassengerId  Survived  Pclass                     Name  Sex   Age  SibSp  \0            1         0       3  Braund, Mr. Owen Harris    1  22.0      1      Parch     Ticket  Fare Cabin Embarked  P1  P2  P3  FamilySize  0      0  A/5 21171  7.25   NaN        S   0   0   1           2  </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 'IsAlone'：是否只身一人</span></span><br><span class="line"><span class="keyword">for</span> dataset <span class="keyword">in</span> full_data:</span><br><span class="line">    dataset[<span class="string">'IsAlone'</span>] = <span class="number">0</span></span><br><span class="line">    dataset.loc[dataset[<span class="string">'FamilySize'</span>] == <span class="number">1</span>, <span class="string">'IsAlone'</span>] = <span class="number">1</span></span><br><span class="line">print(train.head(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>   PassengerId  Survived  Pclass                     Name  Sex   Age  SibSp  \0            1         0       3  Braund, Mr. Owen Harris    1  22.0      1      Parch     Ticket  Fare Cabin Embarked  P1  P2  P3  FamilySize  IsAlone  0      0  A/5 21171  7.25   NaN        S   0   0   1           2        0  </code></pre><h2 id="4-Embarked"><a href="#4-Embarked" class="headerlink" title="4. Embarked"></a>4. Embarked</h2><p>登船港口，有缺失值，先进行缺失值处理</p><p>C = Cherbourg, Q = Queenstown, S = Southampton</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 缺失值处理</span></span><br><span class="line"><span class="keyword">for</span> dataset <span class="keyword">in</span> full_data:</span><br><span class="line">    dataset[<span class="string">'Embarked'</span>] = dataset[<span class="string">'Embarked'</span>].fillna(<span class="string">'S'</span>)</span><br><span class="line"><span class="comment"># One-hot编码</span></span><br><span class="line"><span class="comment"># train</span></span><br><span class="line">train[<span class="string">'E1'</span>] = np.array(train[<span class="string">'Embarked'</span>] == <span class="string">'S'</span>).astype(np.int32)</span><br><span class="line">train[<span class="string">'E2'</span>] = np.array(train[<span class="string">'Embarked'</span>] == <span class="string">'C'</span>).astype(np.int32)</span><br><span class="line">train[<span class="string">'E3'</span>] = np.array(train[<span class="string">'Embarked'</span>] == <span class="string">'Q'</span>).astype(np.int32)</span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">test[<span class="string">'E1'</span>] = np.array(test[<span class="string">'Embarked'</span>] == <span class="string">'S'</span>).astype(np.int32)</span><br><span class="line">test[<span class="string">'E2'</span>] = np.array(test[<span class="string">'Embarked'</span>] == <span class="string">'C'</span>).astype(np.int32)</span><br><span class="line">test[<span class="string">'E3'</span>] = np.array(test[<span class="string">'Embarked'</span>] == <span class="string">'Q'</span>).astype(np.int32)</span><br><span class="line">print(train.head(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>   PassengerId  Survived  Pclass                     Name  Sex   Age  SibSp  \0            1         0       3  Braund, Mr. Owen Harris    1  22.0      1      Parch     Ticket  Fare Cabin Embarked  P1  P2  P3  FamilySize  IsAlone  E1  \0      0  A/5 21171  7.25   NaN        S   0   0   1           2        0   1      E2  E3  0   0   0  </code></pre><h2 id="5-Fare"><a href="#5-Fare" class="headerlink" title="5. Fare"></a>5. Fare</h2><p>乘客票价</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># train</span></span><br><span class="line">train[<span class="string">'CategoricalFare'</span>] = pd.qcut(train[<span class="string">'Fare'</span>], <span class="number">4</span>)</span><br><span class="line">train[<span class="string">'CategoricalFare'</span>].cat.categories = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># one-hot编码</span></span><br><span class="line">train[<span class="string">'F1'</span>] = np.array(train[<span class="string">'CategoricalFare'</span>] == <span class="number">1</span>).astype(np.int32)</span><br><span class="line">train[<span class="string">'F2'</span>] = np.array(train[<span class="string">'CategoricalFare'</span>] == <span class="number">2</span>).astype(np.int32)</span><br><span class="line">train[<span class="string">'F3'</span>] = np.array(train[<span class="string">'CategoricalFare'</span>] == <span class="number">3</span>).astype(np.int32)</span><br><span class="line">train[<span class="string">'F4'</span>] = np.array(train[<span class="string">'CategoricalFare'</span>] == <span class="number">4</span>).astype(np.int32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">test[<span class="string">'CategoricalFare'</span>] = pd.qcut(test[<span class="string">'Fare'</span>], <span class="number">4</span>)</span><br><span class="line">test[<span class="string">'CategoricalFare'</span>].cat.categories = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># one-hot编码</span></span><br><span class="line">test[<span class="string">'F1'</span>] = np.array(test[<span class="string">'CategoricalFare'</span>] == <span class="number">1</span>).astype(np.int32)</span><br><span class="line">test[<span class="string">'F2'</span>] = np.array(test[<span class="string">'CategoricalFare'</span>] == <span class="number">2</span>).astype(np.int32)</span><br><span class="line">test[<span class="string">'F3'</span>] = np.array(test[<span class="string">'CategoricalFare'</span>] == <span class="number">3</span>).astype(np.int32)</span><br><span class="line">test[<span class="string">'F4'</span>] = np.array(test[<span class="string">'CategoricalFare'</span>] == <span class="number">4</span>).astype(np.int32)</span><br><span class="line"></span><br><span class="line">print(train.head(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>   PassengerId  Survived  Pclass                     Name  Sex   Age  SibSp  \0            1         0       3  Braund, Mr. Owen Harris    1  22.0      1      Parch     Ticket  Fare ... FamilySize IsAlone  E1  E2  E3  CategoricalFare  \0      0  A/5 21171  7.25 ...          2       0   1   0   0                1      F1  F2  F3  F4  0   1   0   0   0  [1 rows x 25 columns]</code></pre><h2 id="6-Age"><a href="#6-Age" class="headerlink" title="6. Age"></a>6. Age</h2><p>缺失值处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> dataset <span class="keyword">in</span> full_data:</span><br><span class="line">    age_avg = dataset[<span class="string">'Age'</span>].mean()</span><br><span class="line">    age_std = dataset[<span class="string">'Age'</span>].std()</span><br><span class="line">    age_null_count = dataset[<span class="string">'Age'</span>].isnull().sum()</span><br><span class="line">    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)</span><br><span class="line">    dataset[<span class="string">'Age'</span>][np.isnan(dataset[<span class="string">'Age'</span>])] = age_null_random_list</span><br><span class="line">    dataset[<span class="string">'Age'</span>] = dataset[<span class="string">'Age'</span>].astype(int)</span><br><span class="line">print(train.head(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>   PassengerId  Survived  Pclass                     Name  Sex  Age  SibSp  \0            1         0       3  Braund, Mr. Owen Harris    1   22      1      Parch     Ticket  Fare ... FamilySize IsAlone  E1  E2  E3  CategoricalFare  \0      0  A/5 21171  7.25 ...          2       0   1   0   0                1      F1  F2  F3  F4  0   1   0   0   0  [1 rows x 25 columns]d:\program files\python36\lib\site-packages\ipykernel_launcher.py:6: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrameSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># train</span></span><br><span class="line">train[<span class="string">'CategoricalAge'</span>] = pd.qcut(train[<span class="string">'Age'</span>], <span class="number">5</span>)</span><br><span class="line">train[<span class="string">'CategoricalAge'</span>].cat.categories = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">train[<span class="string">'A1'</span>] = np.array(train[<span class="string">'CategoricalAge'</span>] == <span class="number">1</span>).astype(np.int32)</span><br><span class="line">train[<span class="string">'A2'</span>] = np.array(train[<span class="string">'CategoricalAge'</span>] == <span class="number">2</span>).astype(np.int32)</span><br><span class="line">train[<span class="string">'A3'</span>] = np.array(train[<span class="string">'CategoricalAge'</span>] == <span class="number">3</span>).astype(np.int32)</span><br><span class="line">train[<span class="string">'A4'</span>] = np.array(train[<span class="string">'CategoricalAge'</span>] == <span class="number">4</span>).astype(np.int32)</span><br><span class="line">train[<span class="string">'A5'</span>] = np.array(train[<span class="string">'CategoricalAge'</span>] == <span class="number">5</span>).astype(np.int32)</span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">test[<span class="string">'CategoricalAge'</span>] = pd.qcut(test[<span class="string">'Age'</span>], <span class="number">5</span>)</span><br><span class="line">test[<span class="string">'CategoricalAge'</span>].cat.categories = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">test[<span class="string">'A1'</span>] = np.array(test[<span class="string">'CategoricalAge'</span>] == <span class="number">1</span>).astype(np.int32)</span><br><span class="line">test[<span class="string">'A2'</span>] = np.array(test[<span class="string">'CategoricalAge'</span>] == <span class="number">2</span>).astype(np.int32)</span><br><span class="line">test[<span class="string">'A3'</span>] = np.array(test[<span class="string">'CategoricalAge'</span>] == <span class="number">3</span>).astype(np.int32)</span><br><span class="line">test[<span class="string">'A4'</span>] = np.array(test[<span class="string">'CategoricalAge'</span>] == <span class="number">4</span>).astype(np.int32)</span><br><span class="line">test[<span class="string">'A5'</span>] = np.array(test[<span class="string">'CategoricalAge'</span>] == <span class="number">5</span>).astype(np.int32)</span><br><span class="line">print(train.head(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>   PassengerId  Survived  Pclass                     Name  Sex  Age  SibSp  \0            1         0       3  Braund, Mr. Owen Harris    1   22      1      Parch     Ticket  Fare ... F1 F2  F3  F4  CategoricalAge  A1  A2  A3  A4  \0      0  A/5 21171  7.25 ...  1  0   0   0               2   0   1   0   0      A5  0   0  [1 rows x 31 columns]</code></pre><h2 id="7-Name"><a href="#7-Name" class="headerlink" title="7. Name"></a>7. Name</h2><p>新增一列特征’Title’：头衔</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_title</span><span class="params">(name)</span>:</span></span><br><span class="line">title_search = re.search(<span class="string">' ([A-Za-z]+)\.'</span>, name)</span><br><span class="line"><span class="comment"># If the title exists, extract and return it.</span></span><br><span class="line"><span class="keyword">if</span> title_search:</span><br><span class="line"><span class="keyword">return</span> title_search.group(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dataset <span class="keyword">in</span> full_data:</span><br><span class="line">    dataset[<span class="string">'Title'</span>] = dataset[<span class="string">'Name'</span>].apply(get_title)</span><br><span class="line"></span><br><span class="line">print(pd.crosstab(train[<span class="string">'Title'</span>], train[<span class="string">'Sex'</span>]))</span><br></pre></td></tr></table></figure><pre><code>Sex         0    1Title             Capt        0    1Col         0    2Countess    1    0Don         0    1Dr          1    6Jonkheer    0    1Lady        1    0Major       0    2Master      0   40Miss      182    0Mlle        2    0Mme         1    0Mr          0  517Mrs       125    0Ms          1    0Rev         0    6Sir         0    1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> dataset <span class="keyword">in</span> full_data:</span><br><span class="line">    dataset[<span class="string">'Title'</span>] = dataset[<span class="string">'Title'</span>].replace([<span class="string">'Lady'</span>, <span class="string">'Countess'</span>,<span class="string">'Capt'</span>, <span class="string">'Col'</span>,\</span><br><span class="line"> <span class="string">'Don'</span>, <span class="string">'Dr'</span>, <span class="string">'Major'</span>, <span class="string">'Rev'</span>, <span class="string">'Sir'</span>, <span class="string">'Jonkheer'</span>, <span class="string">'Dona'</span>], <span class="string">'Rare'</span>)</span><br><span class="line"></span><br><span class="line">    dataset[<span class="string">'Title'</span>] = dataset[<span class="string">'Title'</span>].replace(<span class="string">'Mlle'</span>, <span class="string">'Miss'</span>)</span><br><span class="line">    dataset[<span class="string">'Title'</span>] = dataset[<span class="string">'Title'</span>].replace(<span class="string">'Ms'</span>, <span class="string">'Miss'</span>)</span><br><span class="line">    dataset[<span class="string">'Title'</span>] = dataset[<span class="string">'Title'</span>].replace(<span class="string">'Mme'</span>, <span class="string">'Mrs'</span>)</span><br><span class="line"><span class="keyword">print</span> (train[[<span class="string">'Title'</span>, <span class="string">'Survived'</span>]].groupby([<span class="string">'Title'</span>], as_index=<span class="keyword">False</span>).mean())</span><br></pre></td></tr></table></figure><pre><code>    Title  Survived0  Master  0.5750001    Miss  0.7027032      Mr  0.1566733     Mrs  0.7936514    Rare  0.347826</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># train</span></span><br><span class="line">train[<span class="string">'T1'</span>] = np.array(train[<span class="string">'Title'</span>] == <span class="string">'Master'</span>).astype(np.int32)</span><br><span class="line">train[<span class="string">'T2'</span>] = np.array(train[<span class="string">'Title'</span>] == <span class="string">'Miss'</span>).astype(np.int32)</span><br><span class="line">train[<span class="string">'T3'</span>] = np.array(train[<span class="string">'Title'</span>] == <span class="string">'Mr'</span>).astype(np.int32)</span><br><span class="line">train[<span class="string">'T4'</span>] = np.array(train[<span class="string">'Title'</span>] == <span class="string">'Mrs'</span>).astype(np.int32)</span><br><span class="line">train[<span class="string">'T5'</span>] = np.array(train[<span class="string">'Title'</span>] == <span class="string">'Rare'</span>).astype(np.int32)</span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">test[<span class="string">'T1'</span>] = np.array(test[<span class="string">'Title'</span>] == <span class="string">'Master'</span>).astype(np.int32)</span><br><span class="line">test[<span class="string">'T2'</span>] = np.array(test[<span class="string">'Title'</span>] == <span class="string">'Miss'</span>).astype(np.int32)</span><br><span class="line">test[<span class="string">'T3'</span>] = np.array(test[<span class="string">'Title'</span>] == <span class="string">'Mr'</span>).astype(np.int32)</span><br><span class="line">test[<span class="string">'T4'</span>] = np.array(test[<span class="string">'Title'</span>] == <span class="string">'Mrs'</span>).astype(np.int32)</span><br><span class="line">test[<span class="string">'T5'</span>] = np.array(test[<span class="string">'Title'</span>] == <span class="string">'Rare'</span>).astype(np.int32)</span><br><span class="line">print(train.head(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>   PassengerId  Survived  Pclass                     Name  Sex  Age  SibSp  \0            1         0       3  Braund, Mr. Owen Harris    1   22      1      Parch     Ticket  Fare ... A2 A3  A4  A5  Title  T1  T2  T3  T4  T5  0      0  A/5 21171  7.25 ...  1  0   0   0     Mr   0   0   1   0   0  [1 rows x 37 columns]</code></pre><h1 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h1><p>获得训练神经网络的数据：<strong>train_x，train_y_</strong></p><p>以及预测样本：<strong>test_x</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.columns</span><br></pre></td></tr></table></figure><pre><code>Index([&apos;PassengerId&apos;, &apos;Survived&apos;, &apos;Pclass&apos;, &apos;Name&apos;, &apos;Sex&apos;, &apos;Age&apos;, &apos;SibSp&apos;,       &apos;Parch&apos;, &apos;Ticket&apos;, &apos;Fare&apos;, &apos;Cabin&apos;, &apos;Embarked&apos;, &apos;P1&apos;, &apos;P2&apos;, &apos;P3&apos;,       &apos;FamilySize&apos;, &apos;IsAlone&apos;, &apos;E1&apos;, &apos;E2&apos;, &apos;E3&apos;, &apos;CategoricalFare&apos;, &apos;F1&apos;,       &apos;F2&apos;, &apos;F3&apos;, &apos;F4&apos;, &apos;CategoricalAge&apos;, &apos;A1&apos;, &apos;A2&apos;, &apos;A3&apos;, &apos;A4&apos;, &apos;A5&apos;,       &apos;Title&apos;, &apos;T1&apos;, &apos;T2&apos;, &apos;T3&apos;, &apos;T4&apos;, &apos;T5&apos;],      dtype=&apos;object&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">train_x = train[[</span><br><span class="line">    <span class="string">'P1'</span>, <span class="string">'P2'</span>, <span class="string">'P3'</span>, <span class="string">'Sex'</span>, <span class="string">'IsAlone'</span>, <span class="string">'E1'</span>, <span class="string">'E2'</span>, <span class="string">'E3'</span>, <span class="string">'F1'</span>,</span><br><span class="line">    <span class="string">'F2'</span>, <span class="string">'F3'</span>, <span class="string">'F4'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>, <span class="string">'A4'</span>, <span class="string">'A5'</span>, <span class="string">'T1'</span>, <span class="string">'T2'</span>,</span><br><span class="line">    <span class="string">'T3'</span>, <span class="string">'T4'</span>, <span class="string">'T5'</span></span><br><span class="line">]]</span><br><span class="line">print(train_x.head(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>   P1  P2  P3  Sex  IsAlone  E1  E2  E3  F1  F2 ...  A1  A2  A3  A4  A5  T1  \0   0   0   1    1        0   1   0   0   1   0 ...   0   1   0   0   0   0      T2  T3  T4  T5  0   0   1   0   0  [1 rows x 22 columns]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_y_ = train[[<span class="string">'Survived'</span>]]</span><br><span class="line">print(train_y_.head(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>   Survived0         0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test_x = test[[</span><br><span class="line">    <span class="string">'P1'</span>, <span class="string">'P2'</span>, <span class="string">'P3'</span>, <span class="string">'Sex'</span>, <span class="string">'IsAlone'</span>, <span class="string">'E1'</span>, <span class="string">'E2'</span>, <span class="string">'E3'</span>, <span class="string">'F1'</span>,</span><br><span class="line">    <span class="string">'F2'</span>, <span class="string">'F3'</span>, <span class="string">'F4'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>, <span class="string">'A4'</span>, <span class="string">'A5'</span>, <span class="string">'T1'</span>, <span class="string">'T2'</span>,</span><br><span class="line">    <span class="string">'T3'</span>, <span class="string">'T4'</span>, <span class="string">'T5'</span></span><br><span class="line">]]</span><br><span class="line">print(test_x.head(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>   P1  P2  P3  Sex  IsAlone  E1  E2  E3  F1  F2 ...  A1  A2  A3  A4  A5  T1  \0   0   0   1    1        1   0   0   1   1   0 ...   0   0   0   1   0   0      T2  T3  T4  T5  0   0   1   0   0  [1 rows x 22 columns]</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;我的博客&lt;a href=&quot;https://blog.luoyanbin.cn/2018/05/12/Titanic%E8%8E%B7%E6%
      
    
    </summary>
    
      <category term="数据科学" scheme="https://blog.luoyanbin.cn/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="Python" scheme="https://blog.luoyanbin.cn/tags/Python/"/>
    
      <category term="Titanic" scheme="https://blog.luoyanbin.cn/tags/Titanic/"/>
    
      <category term="数据分析" scheme="https://blog.luoyanbin.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Tensorflow" scheme="https://blog.luoyanbin.cn/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客：百度、谷歌收录</title>
    <link href="https://blog.luoyanbin.cn/2018/05/27/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%9A%E7%99%BE%E5%BA%A6%E3%80%81%E8%B0%B7%E6%AD%8C%E6%94%B6%E5%BD%95/"/>
    <id>https://blog.luoyanbin.cn/2018/05/27/Hexo博客：百度、谷歌收录/</id>
    <published>2018-05-27T11:13:46.000Z</published>
    <updated>2018-11-22T12:00:11.589Z</updated>
    
    <content type="html"><![CDATA[<p>写博客总是希望有读者，如何让自己的博客被搜索引擎网站收录，可以被大家搜索到就十分重要了！</p><p>谷歌收录很快，基本上第二天就收录了；等了很久，自己的博客终于被百度收录了！所以，记录一下百度、谷歌收录的过程…</p><h1 id="绑定个性域名"><a href="#绑定个性域名" class="headerlink" title="绑定个性域名"></a><a href="">绑定个性域名</a></h1><h1 id="添加站点地图sitemap"><a href="#添加站点地图sitemap" class="headerlink" title="添加站点地图sitemap"></a>添加站点地图sitemap</h1><ul><li>打开Hexo博客的根目录，打开cmd，安装sitemap及baidusitemap</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><ul><li>打开站点配置文件_config.yml，添加</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 添加站点地图sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><h1 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h1><h2 id="验证网站是否被百度收录"><a href="#验证网站是否被百度收录" class="headerlink" title="验证网站是否被百度收录"></a>验证网站是否被百度收录</h2><p>打开百度搜索，搜一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:blog.luoyanbin.cn</span><br></pre></td></tr></table></figure><p>如果搜索不到就说明没有收录</p><h2 id="验证网站"><a href="#验证网站" class="headerlink" title="验证网站"></a>验证网站</h2><ul><li>打开<a href="https://ziyuan.baidu.com/site/index" target="_blank" rel="noopener">百度站点信息</a>的站点管理，点击添加网站</li><li>输入网站</li><li><p>验证网站，这里使用的验证方式是文件验证</p><ul><li>下载验证文件，文件名类似于baidu_verify_xxxxxx.html</li><li>打开验证文件，在第一行添加下面内容，hexo g -d 后点击完成验证</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="提交链接"><a href="#提交链接" class="headerlink" title="提交链接"></a>提交链接</h2><p>完成验证后，接着是把我们的网站提交给百度，主要介绍一下三种方式</p><ul><li>主动推送</li></ul><p>主动推送比较复杂，还好有好心的博主帮我们做一个百度主动推送的插件<a href="https://hui-wang.info/2016/10/23/Hexo%E6%8F%92%E4%BB%B6%E4%B9%8B%E7%99%BE%E5%BA%A6%E4%B8%BB%E5%8A%A8%E6%8F%90%E4%BA%A4%E9%93%BE%E6%8E%A5/" target="_blank" rel="noopener">hexo-baidu-url-submit</a></p><ul><li>自动推送</li></ul><p>NexT主题集成了自动推送功能，打开主题配置文件_config.yml，找到baidu_push，设置为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidu_push: true</span><br></pre></td></tr></table></figure><ul><li>sitemap提交</li></ul><p>点击sitemap提交，输入之前生成的baidusitemap.xml网址，比如我提交的网址是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.luoyanbin.cn/baidusitemap.xml</span><br></pre></td></tr></table></figure><p>点击提交即可</p><h1 id="谷歌收录"><a href="#谷歌收录" class="headerlink" title="谷歌收录"></a>谷歌收录</h1><ul><li><p>登录<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">Search Console</a></p></li><li><p>和百度收录类似，先验证网站，验证方式也是一致的</p></li><li><p>验证完后点击网址进入console，点击站点地图（这里使用的是Google Search Console BETA版），输入sitemap.xml，提交即可</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写博客总是希望有读者，如何让自己的博客被搜索引擎网站收录，可以被大家搜索到就十分重要了！&lt;/p&gt;
&lt;p&gt;谷歌收录很快，基本上第二天就收录了；等了很久，自己的博客终于被百度收录了！所以，记录一下百度、谷歌收录的过程…&lt;/p&gt;
&lt;h1 id=&quot;绑定个性域名&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="博客搭建" scheme="https://blog.luoyanbin.cn/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://blog.luoyanbin.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客时遇到的错误Error</title>
    <link href="https://blog.luoyanbin.cn/2018/05/24/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AFError/"/>
    <id>https://blog.luoyanbin.cn/2018/05/24/Hexo搭建博客时遇到的错误Error/</id>
    <published>2018-05-24T11:33:46.000Z</published>
    <updated>2018-11-22T12:00:11.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Error-Host-key-verification-failed"><a href="#Error-Host-key-verification-failed" class="headerlink" title="Error: Host key verification failed."></a>Error: Host key verification failed.</h1><ul><li>错误代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Error: Host key verification failed.</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><ul><li>解决办法</li></ul><p>Git Bash Here</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@git.coding.net</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Error-Host-key-verification-failed&quot;&gt;&lt;a href=&quot;#Error-Host-key-verification-failed&quot; class=&quot;headerlink&quot; title=&quot;Error: Host key verifica
      
    
    </summary>
    
      <category term="博客搭建" scheme="https://blog.luoyanbin.cn/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://blog.luoyanbin.cn/tags/Hexo/"/>
    
      <category term="Error" scheme="https://blog.luoyanbin.cn/tags/Error/"/>
    
  </entry>
  
  <entry>
    <title>Pandas.DataFrame基础</title>
    <link href="https://blog.luoyanbin.cn/2018/05/24/Pandas-DataFrame%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.luoyanbin.cn/2018/05/24/Pandas-DataFrame基础使用/</id>
    <published>2018-05-24T10:39:24.000Z</published>
    <updated>2018-11-22T12:00:11.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DataFrame基本操作"><a href="#DataFrame基本操作" class="headerlink" title="DataFrame基本操作"></a>DataFrame基本操作</h1><h2 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h2><p><a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.head.html" target="_blank" rel="noopener">DataFrame.head(n=5)</a></p><p>返回n行数据，默认显示5行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from pypower.case118 import case118</span><br><span class="line">import pandas as pd</span><br><span class="line">ppc = case118()</span><br><span class="line">branch = pd.DataFrame(ppc[&apos;branch&apos;])</span><br><span class="line">branch.head()</span><br><span class="line">-------------</span><br><span class="line"> 0    1        2        3        4       5    6    7    8    9    10  \</span><br><span class="line">0  1.0  2.0  0.03030  0.09990  0.02540  9900.0  0.0  0.0  0.0  0.0  1.0</span><br><span class="line">1  1.0  3.0  0.01290  0.04240  0.01082  9900.0  0.0  0.0  0.0  0.0  1.0</span><br><span class="line">2  4.0  5.0  0.00176  0.00798  0.00210  9900.0  0.0  0.0  0.0  0.0  1.0</span><br><span class="line">3  3.0  5.0  0.02410  0.10800  0.02840  9900.0  0.0  0.0  0.0  0.0  1.0</span><br><span class="line">4  5.0  6.0  0.01190  0.05400  0.01426  9900.0  0.0  0.0  0.0  0.0  1.0</span><br><span class="line"></span><br><span class="line">      11     12</span><br><span class="line">0 -360.0  360.0</span><br><span class="line">1 -360.0  360.0</span><br><span class="line">2 -360.0  360.0</span><br><span class="line">3 -360.0  360.0</span><br><span class="line">4 -360.0  360.0</span><br></pre></td></tr></table></figure><h2 id="删除行、列"><a href="#删除行、列" class="headerlink" title="删除行、列"></a>删除行、列</h2><p><a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html" target="_blank" rel="noopener">DataFrame.drop(labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors=’raise’)</a></p><ul><li>labels: 单个标签或者标签列表</li><li>axis: 0表示行，1表示列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">branch1 = branch.drop([i for i in range(5,13)], axis=1)</span><br><span class="line">branch1.head()</span><br><span class="line">--------------</span><br><span class="line">     0    1        2        3        4</span><br><span class="line">0  1.0  2.0  0.03030  0.09990  0.02540</span><br><span class="line">1  1.0  3.0  0.01290  0.04240  0.01082</span><br><span class="line">2  4.0  5.0  0.00176  0.00798  0.00210</span><br><span class="line">3  3.0  5.0  0.02410  0.10800  0.02840</span><br><span class="line">4  5.0  6.0  0.01190  0.05400  0.01426</span><br></pre></td></tr></table></figure><h2 id="改变某一列数据类型"><a href="#改变某一列数据类型" class="headerlink" title="改变某一列数据类型"></a>改变某一列数据类型</h2><p><a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.astype.html" target="_blank" rel="noopener">DataFrame.astype(dtype, copy=True, errors=’raise’, **kwargs)</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">branch1[[0]] = branch1[[0]].astype(int)</span><br><span class="line">branch1[[1]] = branch1[[1]].astype(int)</span><br><span class="line">branch1.head()</span><br><span class="line">--------------</span><br><span class="line">   0  1        2        3        4</span><br><span class="line">0  1  2  0.03030  0.09990  0.02540</span><br><span class="line">1  1  3  0.01290  0.04240  0.01082</span><br><span class="line">2  4  5  0.00176  0.00798  0.00210</span><br><span class="line">3  3  5  0.02410  0.10800  0.02840</span><br><span class="line">4  5  6  0.01190  0.05400  0.01426</span><br></pre></td></tr></table></figure><h2 id="修改列标签"><a href="#修改列标签" class="headerlink" title="修改列标签"></a>修改列标签</h2><p><a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.rename.html" target="_blank" rel="noopener">DataFrame.rename(mapper=None, index=None, columns=None, axis=None, copy=True, inplace=False, level=None)</a></p><ul><li>columns: 字典类型</li><li>inplace：boolean类型, 默认是false。true表示在原DataFrame上修改，false相反。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">branch1.rename(</span><br><span class="line">    columns=&#123;</span><br><span class="line">        0: &apos;支路首段&apos;,</span><br><span class="line">        1: &apos;支路末端&apos;,</span><br><span class="line">        2: &apos;支路电阻&apos;,</span><br><span class="line">        3: &apos;支路电抗&apos;,</span><br><span class="line">        4: &apos;支路电纳&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    inplace=True</span><br><span class="line">)</span><br><span class="line">branch1.head()</span><br><span class="line">--------------</span><br><span class="line">   支路首段  支路末端     支路电阻     支路电抗     支路电纳</span><br><span class="line">0     1     2  0.03030  0.09990  0.02540</span><br><span class="line">1     1     3  0.01290  0.04240  0.01082</span><br><span class="line">2     4     5  0.00176  0.00798  0.00210</span><br><span class="line">3     3     5  0.02410  0.10800  0.02840</span><br><span class="line">4     5     6  0.01190  0.05400  0.01426</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DataFrame基本操作&quot;&gt;&lt;a href=&quot;#DataFrame基本操作&quot; class=&quot;headerlink&quot; title=&quot;DataFrame基本操作&quot;&gt;&lt;/a&gt;DataFrame基本操作&lt;/h1&gt;&lt;h2 id=&quot;查看数据&quot;&gt;&lt;a href=&quot;#查看数据&quot;
      
    
    </summary>
    
      <category term="Python基础" scheme="https://blog.luoyanbin.cn/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Pandas" scheme="https://blog.luoyanbin.cn/tags/Pandas/"/>
    
      <category term="DataFrame" scheme="https://blog.luoyanbin.cn/tags/DataFrame/"/>
    
  </entry>
  
  <entry>
    <title>Selenium+Chrome获取异步加载数据</title>
    <link href="https://blog.luoyanbin.cn/2018/05/24/Selenium-Chrome%E8%8E%B7%E5%8F%96%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE/"/>
    <id>https://blog.luoyanbin.cn/2018/05/24/Selenium-Chrome获取异步加载数据/</id>
    <published>2018-05-24T08:58:16.000Z</published>
    <updated>2018-11-22T12:00:11.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Python==3.6</li><li>selenium==3.12.0</li><li>Chrome==66.0.3359.181</li><li><a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">Chromedriver</a>==v2.37 </li></ul><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.chrome.options import Options</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(&apos;--headless&apos;)</span><br><span class="line">driver = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">driver.get(&apos;http://www.xxxx.html&apos;)</span><br><span class="line">html = driver.page_source</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Python==3.6&lt;/li&gt;
&lt;li&gt;selenium==3.12.0&lt;/li&gt;
&lt;li&gt;Chrome==66.0.3359
      
    
    </summary>
    
      <category term="爬虫基础" scheme="https://blog.luoyanbin.cn/categories/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python" scheme="https://blog.luoyanbin.cn/tags/Python/"/>
    
      <category term="爬虫" scheme="https://blog.luoyanbin.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Selenium" scheme="https://blog.luoyanbin.cn/tags/Selenium/"/>
    
      <category term="Chrome" scheme="https://blog.luoyanbin.cn/tags/Chrome/"/>
    
      <category term="Chromedriver" scheme="https://blog.luoyanbin.cn/tags/Chromedriver/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB数据库基础</title>
    <link href="https://blog.luoyanbin.cn/2018/05/20/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
    <id>https://blog.luoyanbin.cn/2018/05/20/MongoDB数据库基础/</id>
    <published>2018-05-20T12:24:08.000Z</published>
    <updated>2018-11-22T12:00:11.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h1><ul><li><a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="noopener">MongoDB下载地址</a></li><li><p><a href="http://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank" rel="noopener">Windows平台MongoDB安装教程</a></p><ul><li>创建数据目录，MongoDB的数据目录不会主动创建，需要手动创建。</li><li>我的MongoDB数据目录为：F:\data\db</li></ul></li></ul><h1 id="使用MongoDB"><a href="#使用MongoDB" class="headerlink" title="使用MongoDB"></a>使用MongoDB</h1><h2 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h2><ul><li>启动命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath F:\data\db</span><br></pre></td></tr></table></figure><ul><li>启动成功</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">2018-05-20T21:13:49.628+0800 I CONTROL  [initandlisten] MongoDB starting : pid=3</span><br><span class="line">860 port=27017 dbpath=F:\data\db 64-bit host=PC-20180415ADZM</span><br><span class="line">2018-05-20T21:13:49.629+0800 I CONTROL  [initandlisten] targetMinOS: Windows 7/W</span><br><span class="line">indows Server 2008 R2</span><br><span class="line">2018-05-20T21:13:49.629+0800 I CONTROL  [initandlisten] db version v3.6.4</span><br><span class="line">2018-05-20T21:13:49.629+0800 I CONTROL  [initandlisten] git version: d0181a711f7</span><br><span class="line">e7f39e60b5aeb1dc7097bf6ae5856</span><br><span class="line">2018-05-20T21:13:49.629+0800 I CONTROL  [initandlisten] OpenSSL version: OpenSSL</span><br><span class="line"> 1.0.2o-fips  27 Mar 2018</span><br><span class="line">2018-05-20T21:13:49.629+0800 I CONTROL  [initandlisten] allocator: tcmalloc</span><br><span class="line">2018-05-20T21:13:49.629+0800 I CONTROL  [initandlisten] modules: none</span><br><span class="line">2018-05-20T21:13:49.629+0800 I CONTROL  [initandlisten] build environment:</span><br><span class="line">2018-05-20T21:13:49.629+0800 I CONTROL  [initandlisten]     distmod: 2008plus-ss</span><br><span class="line">l</span><br><span class="line">2018-05-20T21:13:49.629+0800 I CONTROL  [initandlisten]     distarch: x86_64</span><br><span class="line">2018-05-20T21:13:49.629+0800 I CONTROL  [initandlisten]     target_arch: x86_64</span><br><span class="line">2018-05-20T21:13:49.629+0800 I CONTROL  [initandlisten] options: &#123; storage: &#123; db</span><br><span class="line">Path: &quot;F:\data\db&quot; &#125; &#125;</span><br><span class="line">2018-05-20T21:13:49.630+0800 I -        [initandlisten] Detected data files in F</span><br><span class="line">:\data\db created by the &apos;wiredTiger&apos; storage engine, so setting the active stor</span><br><span class="line">age engine to &apos;wiredTiger&apos;.</span><br><span class="line">2018-05-20T21:13:49.631+0800 I STORAGE  [initandlisten] wiredtiger_open config:</span><br><span class="line">create,cache_size=1478M,session_max=20000,eviction=(threads_min=4,threads_max=4)</span><br><span class="line">,config_base=false,statistics=(fast),cache_cursors=false,log=(enabled=true,archi</span><br><span class="line">ve=true,path=journal,compressor=snappy),file_manager=(close_idle_time=100000),st</span><br><span class="line">atistics_log=(wait=0),verbose=(recovery_progress),</span><br><span class="line">2018-05-20T21:13:49.953+0800 I STORAGE  [initandlisten] WiredTiger message [1526</span><br><span class="line">822029:953125][3860:1997878144], txn-recover: Main recovery loop: starting at 2/</span><br><span class="line">6272</span><br><span class="line">2018-05-20T21:13:50.180+0800 I STORAGE  [initandlisten] WiredTiger message [1526</span><br><span class="line">822030:180138][3860:1997878144], txn-recover: Recovering log 2 through 3</span><br><span class="line">2018-05-20T21:13:50.279+0800 I STORAGE  [initandlisten] WiredTiger message [1526</span><br><span class="line">822030:279144][3860:1997878144], txn-recover: Recovering log 3 through 3</span><br><span class="line">2018-05-20T21:13:50.384+0800 I STORAGE  [initandlisten] WiredTiger message [1526</span><br><span class="line">822030:384150][3860:1997878144], txn-recover: Set global recovery timestamp: 0</span><br><span class="line">2018-05-20T21:13:50.934+0800 I CONTROL  [initandlisten]</span><br><span class="line">2018-05-20T21:13:50.935+0800 I CONTROL  [initandlisten] ** WARNING: Access contr</span><br><span class="line">ol is not enabled for the database.</span><br><span class="line">2018-05-20T21:13:50.936+0800 I CONTROL  [initandlisten] **          Read and wri</span><br><span class="line">te access to data and configuration is unrestricted.</span><br><span class="line">2018-05-20T21:13:50.937+0800 I CONTROL  [initandlisten]</span><br><span class="line">2018-05-20T21:13:50.938+0800 I CONTROL  [initandlisten] ** WARNING: This server</span><br><span class="line">is bound to localhost.</span><br><span class="line">2018-05-20T21:13:50.939+0800 I CONTROL  [initandlisten] **          Remote syste</span><br><span class="line">ms will be unable to connect to this server.</span><br><span class="line">2018-05-20T21:13:50.941+0800 I CONTROL  [initandlisten] **          Start the se</span><br><span class="line">rver with --bind_ip &lt;address&gt; to specify which IP</span><br><span class="line">2018-05-20T21:13:50.942+0800 I CONTROL  [initandlisten] **          addresses it</span><br><span class="line"> should serve responses from, or with --bind_ip_all to</span><br><span class="line">2018-05-20T21:13:50.943+0800 I CONTROL  [initandlisten] **          bind to all</span><br><span class="line">interfaces. If this behavior is desired, start the</span><br><span class="line">2018-05-20T21:13:50.944+0800 I CONTROL  [initandlisten] **          server with</span><br><span class="line">--bind_ip 127.0.0.1 to disable this warning.</span><br><span class="line">2018-05-20T21:13:50.945+0800 I CONTROL  [initandlisten]</span><br><span class="line">2018-05-20T21:13:50.946+0800 I CONTROL  [initandlisten] Hotfix KB2731284 or late</span><br><span class="line">r update is not installed, will zero-out data files.</span><br><span class="line">2018-05-20T21:13:50.947+0800 I CONTROL  [initandlisten]</span><br><span class="line">2018-05-20T21:13:50.948+0800 I CONTROL  [initandlisten] ** WARNING: The file sys</span><br><span class="line">tem cache of this machine is configured to be greater than 40% of the total memo</span><br><span class="line">ry. This can lead to increased memory pressure and poor performance.</span><br><span class="line">2018-05-20T21:13:50.949+0800 I CONTROL  [initandlisten] See http://dochub.mongod</span><br><span class="line">b.org/core/wt-windows-system-file-cache</span><br><span class="line">2018-05-20T21:13:50.950+0800 I CONTROL  [initandlisten]</span><br><span class="line">2018-05-20T21:13:52.430+0800 I FTDC     [initandlisten] Initializing full-time d</span><br><span class="line">iagnostic data capture with directory &apos;F:/data/db/diagnostic.data&apos;</span><br><span class="line">2018-05-20T21:13:52.527+0800 I NETWORK  [initandlisten] waiting for connections</span><br><span class="line">on port 27017</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装MongoDB&quot;&gt;&lt;a href=&quot;#安装MongoDB&quot; class=&quot;headerlink&quot; title=&quot;安装MongoDB&quot;&gt;&lt;/a&gt;安装MongoDB&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/dow
      
    
    </summary>
    
      <category term="数据库基础" scheme="https://blog.luoyanbin.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="MongoDB" scheme="https://blog.luoyanbin.cn/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Titanic获救预测</title>
    <link href="https://blog.luoyanbin.cn/2018/05/12/Titanic%E8%8E%B7%E6%95%91%E9%A2%84%E6%B5%8B/"/>
    <id>https://blog.luoyanbin.cn/2018/05/12/Titanic获救预测/</id>
    <published>2018-05-12T12:09:16.000Z</published>
    <updated>2018-11-22T12:00:11.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p><strong>Titanic获救预测</strong>是学习数据分析、机器学习、Tensorflow库的入门手练小项目，在本篇博客记录一下自己的学习过程，本项目的GitHub地址为<a href="https://github.com/chinaluoyanbin/Predict-survival-on-the-Titanic" target="_blank" rel="noopener">Predict-survival-on-the-Titanic</a></p><p>修改了参考文献的教程中的一些小错误</p><h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p>Titanic沉船事故是历史上最著名的沉船事故之一。1912年4月15日，在它首次航行的过程中，Titanic号与冰山相撞后沉没，2224名乘客和机组人员中有1502人遇难。这场轰动一时的悲剧震惊了国际社会，随后产生了更好的船舶安全管理条例。</p><p>在本次项目中，需要分析哪一类人群更可能在沉船事故中生存下来。使用机器学习工具预测那些乘客在悲剧中存活下来。</p><h1 id="代码介绍"><a href="#代码介绍" class="headerlink" title="代码介绍"></a>代码介绍</h1><h2 id="data-preprocess-py"><a href="#data-preprocess-py" class="headerlink" title="data_preprocess.py"></a>data_preprocess.py</h2><p>对数据进行预处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># coding: utf-8</span><br><span class="line">import pandas as pd</span><br><span class="line">import os</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def train_preprocess():</span><br><span class="line">    # 读取train.csv为pandas.DataFrame</span><br><span class="line">    train = pd.read_csv(os.getcwd() + &apos;\\data\\train.csv&apos;)</span><br><span class="line"></span><br><span class="line">    # 数据预处理</span><br><span class="line">    train[&apos;Age&apos;] = train[&apos;Age&apos;].fillna(train[&apos;Age&apos;].mean())</span><br><span class="line">    train[&apos;Cabin&apos;] = pd.factorize(train.Cabin)[0]</span><br><span class="line">    train.fillna(0, inplace=True)</span><br><span class="line">    train[&apos;Sex&apos;] = [1 if i == &apos;male&apos; else 0 for i in train.Sex]</span><br><span class="line">    # 处理Pclass</span><br><span class="line">    train[&apos;P1&apos;] = np.array(train[&apos;Pclass&apos;] == 1).astype(np.int32)</span><br><span class="line">    train[&apos;P2&apos;] = np.array(train[&apos;Pclass&apos;] == 2).astype(np.int32)</span><br><span class="line">    train[&apos;P3&apos;] = np.array(train[&apos;Pclass&apos;] == 3).astype(np.int32)</span><br><span class="line">    del train[&apos;Pclass&apos;]</span><br><span class="line">    # 处理Embarked</span><br><span class="line">    train[&apos;E1&apos;] = np.array(train[&apos;Embarked&apos;] == &apos;S&apos;).astype(np.int32)</span><br><span class="line">    train[&apos;E2&apos;] = np.array(train[&apos;Embarked&apos;] == &apos;C&apos;).astype(np.int32)</span><br><span class="line">    train[&apos;E3&apos;] = np.array(train[&apos;Embarked&apos;] == &apos;Q&apos;).astype(np.int32)</span><br><span class="line">    del train[&apos;Embarked&apos;]</span><br><span class="line"></span><br><span class="line">    # 得到train_x, train_y_</span><br><span class="line">    train_x = train[[</span><br><span class="line">        &apos;Sex&apos;, &apos;Age&apos;, &apos;SibSp&apos;, &apos;Parch&apos;, &apos;Fare&apos;, &apos;Cabin&apos;, &apos;P1&apos;, &apos;P2&apos;,</span><br><span class="line">        &apos;P3&apos;, &apos;E1&apos;, &apos;E2&apos;, &apos;E3&apos;</span><br><span class="line">    ]]</span><br><span class="line">    train_y_ = train[&apos;Survived&apos;].values.reshape(len(train), 1)</span><br><span class="line"></span><br><span class="line">    return train_x, train_y_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_preproces():</span><br><span class="line">    # 读取test.csv为pandas.DataFrame</span><br><span class="line">    test = pd.read_csv(os.getcwd() + &apos;\\data\\test.csv&apos;)</span><br><span class="line"></span><br><span class="line">    # 数据预处理</span><br><span class="line">    test[&apos;Age&apos;] = test[&apos;Age&apos;].fillna(test[&apos;Age&apos;].mean())</span><br><span class="line">    test[&apos;Cabin&apos;] = pd.factorize(test.Cabin)[0]</span><br><span class="line">    test.fillna(0, inplace=True)</span><br><span class="line">    test[&apos;Sex&apos;] = [1 if i == &apos;male&apos; else 0 for i in test.Sex]</span><br><span class="line">    # 处理Pclass</span><br><span class="line">    test[&apos;P1&apos;] = np.array(test[&apos;Pclass&apos;] == 1).astype(np.int32)</span><br><span class="line">    test[&apos;P2&apos;] = np.array(test[&apos;Pclass&apos;] == 2).astype(np.int32)</span><br><span class="line">    test[&apos;P3&apos;] = np.array(test[&apos;Pclass&apos;] == 3).astype(np.int32)</span><br><span class="line">    del test[&apos;Pclass&apos;]</span><br><span class="line">    # 处理Embarked</span><br><span class="line">    test[&apos;E1&apos;] = np.array(test[&apos;Embarked&apos;] == &apos;S&apos;).astype(np.int32)</span><br><span class="line">    test[&apos;E2&apos;] = np.array(test[&apos;Embarked&apos;] == &apos;C&apos;).astype(np.int32)</span><br><span class="line">    test[&apos;E3&apos;] = np.array(test[&apos;Embarked&apos;] == &apos;Q&apos;).astype(np.int32)</span><br><span class="line">    del test[&apos;Embarked&apos;]</span><br><span class="line"></span><br><span class="line">    # 得到test_x</span><br><span class="line">    test_x = test[[</span><br><span class="line">        &apos;Sex&apos;, &apos;Age&apos;, &apos;SibSp&apos;, &apos;Parch&apos;, &apos;Fare&apos;, &apos;Cabin&apos;, &apos;P1&apos;, &apos;P2&apos;,</span><br><span class="line">        &apos;P3&apos;, &apos;E1&apos;, &apos;E2&apos;, &apos;E3&apos;</span><br><span class="line">    ]]</span><br><span class="line"></span><br><span class="line">    return test_x</span><br></pre></td></tr></table></figure><h2 id="forward-py"><a href="#forward-py" class="headerlink" title="forward.py"></a>forward.py</h2><p>前向传播</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_weight(shape):</span><br><span class="line">    w = tf.Variable(tf.random_normal(shape))</span><br><span class="line">    return w</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_bias(shape):</span><br><span class="line">    b = tf.Variable(tf.random_normal(shape))</span><br><span class="line">    return b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def forward(x):</span><br><span class="line">    w = get_weight([12, 1])</span><br><span class="line">    b = get_bias([1])</span><br><span class="line">    y = tf.matmul(x, w) + b</span><br><span class="line">    pred = tf.cast(tf.sigmoid(y) &gt; 0.5, tf.float32)</span><br><span class="line"></span><br><span class="line">    return y, pred</span><br></pre></td></tr></table></figure><h2 id="backward-py"><a href="#backward-py" class="headerlink" title="backward.py"></a>backward.py</h2><p>反向传播</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import numpy as np</span><br><span class="line">from data_preprocess import train_preprocess</span><br><span class="line">from forward import forward</span><br><span class="line"></span><br><span class="line">STEPS = 25000</span><br><span class="line">BATCH_SIZE = 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def backward():</span><br><span class="line">    x = tf.placeholder(tf.float32, shape=[None, 12])</span><br><span class="line">    y_ = tf.placeholder(tf.float32, shape=[None, 1])</span><br><span class="line"></span><br><span class="line">    train_x, train_y_ = train_preprocess()</span><br><span class="line">    y, pred = forward(x)</span><br><span class="line"></span><br><span class="line">    # 定义损失函数loss</span><br><span class="line">    loss = tf.reduce_mean(</span><br><span class="line">        tf.nn.sigmoid_cross_entropy_with_logits(labels=y_, logits=y))</span><br><span class="line"></span><br><span class="line">    # 定义反向传播方法</span><br><span class="line">    train_step = tf.train.GradientDescentOptimizer(0.0003).minimize(loss)</span><br><span class="line"></span><br><span class="line">    # 定义准确率</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(tf.equal(pred, y_), tf.float32))</span><br><span class="line"></span><br><span class="line">    with tf.Session() as sess:</span><br><span class="line">        init_op = tf.global_variables_initializer()</span><br><span class="line">        sess.run(init_op)</span><br><span class="line"></span><br><span class="line">        train_loss = []</span><br><span class="line">        train_acc = []</span><br><span class="line"></span><br><span class="line">        for i in range(STEPS):</span><br><span class="line">            index = np.random.permutation(len(train_y_))</span><br><span class="line">            train_x = train_x.take(index)</span><br><span class="line">            train_y_ = train_y_[index]</span><br><span class="line">            for j in range(len(train_y_) // 100 + 1):</span><br><span class="line">                start = j * BATCH_SIZE</span><br><span class="line">                end = start + BATCH_SIZE</span><br><span class="line">                sess.run(</span><br><span class="line">                    train_step,</span><br><span class="line">                    feed_dict=&#123;</span><br><span class="line">                        x: train_x[start:end],</span><br><span class="line">                        y_: train_y_[start:end]</span><br><span class="line">                    &#125;)</span><br><span class="line">            if i % 1000 == 0:</span><br><span class="line">                train_loss_temp = sess.run(</span><br><span class="line">                    loss,</span><br><span class="line">                    feed_dict=&#123;</span><br><span class="line">                        x: train_x[start:end],</span><br><span class="line">                        y_: train_y_[start:end]</span><br><span class="line">                    &#125;)</span><br><span class="line">                train_loss.append(train_loss_temp)</span><br><span class="line">                train_acc_temp = sess.run(</span><br><span class="line">                    accuracy,</span><br><span class="line">                    feed_dict=&#123;</span><br><span class="line">                        x: train_x[start:end],</span><br><span class="line">                        y_: train_y_[start:end]</span><br><span class="line">                    &#125;)</span><br><span class="line">                train_acc.append(train_acc_temp)</span><br><span class="line">                print(train_loss_temp, &apos; &apos;, train_acc_temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    backward()</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">25.031631   0.2857143</span><br><span class="line">0.6623061   0.7032967</span><br><span class="line">0.6302701   0.6813187</span><br><span class="line">0.6674858   0.6593407</span><br><span class="line">0.49119952   0.72527474</span><br><span class="line">0.49594036   0.7802198</span><br><span class="line">0.44275057   0.84615386</span><br><span class="line">0.44745535   0.7912088</span><br><span class="line">0.44932628   0.8131868</span><br><span class="line">0.5412523   0.73626375</span><br><span class="line">0.48308572   0.7912088</span><br><span class="line">0.4907554   0.7802198</span><br><span class="line">0.41890615   0.8681319</span><br><span class="line">0.4681515   0.7912088</span><br><span class="line">0.44097015   0.85714287</span><br><span class="line">0.45140973   0.7802198</span><br><span class="line">0.39417002   0.85714287</span><br><span class="line">0.43789506   0.83516484</span><br><span class="line">0.4205189   0.8131868</span><br><span class="line">0.45825815   0.8021978</span><br><span class="line">0.4797148   0.8021978</span><br><span class="line">0.4898475   0.7912088</span><br><span class="line">0.46390718   0.7912088</span><br><span class="line">0.37100115   0.84615386</span><br><span class="line">0.41760778   0.8021978</span><br></pre></td></tr></table></figure><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1><p>对测试集数据进行预测后，在Kaggle上Submit Prediction的成绩为0.76555</p><p><img src="http://wx2.sinaimg.cn/mw690/715e29a9gy1frbxrmv814j20qk03wq2x.jpg" alt=""></p><p>如果有提高准确率的方法，希望可以在评论去留言，大家一起讨论！</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="http://study.163.com/course/courseMain.htm?courseId=1004937015" target="_blank" rel="noopener">Tensorflow基础之泰坦尼克获救预测</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Titanic获救预测&lt;/strong&gt;是学习数据分析、机器学习、Tensorflow库的入门手练小项目，在本篇博客记录一下
      
    
    </summary>
    
      <category term="数据科学" scheme="https://blog.luoyanbin.cn/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="Python" scheme="https://blog.luoyanbin.cn/tags/Python/"/>
    
      <category term="Titanic" scheme="https://blog.luoyanbin.cn/tags/Titanic/"/>
    
      <category term="数据分析" scheme="https://blog.luoyanbin.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Tensorflow" scheme="https://blog.luoyanbin.cn/tags/Tensorflow/"/>
    
  </entry>
  
</feed>
